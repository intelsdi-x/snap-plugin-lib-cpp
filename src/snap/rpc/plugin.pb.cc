// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plugin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* NamespaceElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamespaceElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubProcArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubProcArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metric_reflection_ = NULL;
struct MetricOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr string_data_;
  float float32_data_;
  double float64_data_;
  ::google::protobuf::int32 int32_data_;
  ::google::protobuf::int64 int64_data_;
  ::google::protobuf::internal::ArenaStringPtr bytes_data_;
}* Metric_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Metric_TagsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConfigMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigMap_IntMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConfigMap_StringMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConfigMap_FloatMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConfigMap_BoolMapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KillArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfigPolicyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfigPolicyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfigPolicyReply_BoolPolicyEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetConfigPolicyReply_FloatPolicyEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetConfigPolicyReply_IntegerPolicyEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetConfigPolicyReply_StringPolicyEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BoolRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoolRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoolPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoolPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoolPolicy_RulesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FloatRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatPolicy_RulesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IntegerRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegerRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegerPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegerPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegerPolicy_RulesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StringRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringPolicy_RulesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MetricsArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricsArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetricTypesArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMetricTypesArg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plugin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_plugin_2eproto() {
  protobuf_AddDesc_plugin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plugin.proto");
  GOOGLE_CHECK(file != NULL);
  Empty_descriptor_ = file->message_type(0);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::default_instance_,
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _is_default_instance_));
  ErrReply_descriptor_ = file->message_type(1);
  static const int ErrReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrReply, error_),
  };
  ErrReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrReply_descriptor_,
      ErrReply::default_instance_,
      ErrReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(ErrReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrReply, _is_default_instance_));
  Time_descriptor_ = file->message_type(2);
  static const int Time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, nsec_),
  };
  Time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      -1,
      -1,
      -1,
      sizeof(Time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _is_default_instance_));
  NamespaceElement_descriptor_ = file->message_type(3);
  static const int NamespaceElement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceElement, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceElement, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceElement, name_),
  };
  NamespaceElement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NamespaceElement_descriptor_,
      NamespaceElement::default_instance_,
      NamespaceElement_offsets_,
      -1,
      -1,
      -1,
      sizeof(NamespaceElement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceElement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceElement, _is_default_instance_));
  PubProcArg_descriptor_ = file->message_type(4);
  static const int PubProcArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubProcArg, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubProcArg, config_),
  };
  PubProcArg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PubProcArg_descriptor_,
      PubProcArg::default_instance_,
      PubProcArg_offsets_,
      -1,
      -1,
      -1,
      sizeof(PubProcArg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubProcArg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubProcArg, _is_default_instance_));
  Metric_descriptor_ = file->message_type(5);
  static const int Metric_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, lastadvertisedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, description_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Metric_default_oneof_instance_, string_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Metric_default_oneof_instance_, float32_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Metric_default_oneof_instance_, float64_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Metric_default_oneof_instance_, int32_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Metric_default_oneof_instance_, int64_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Metric_default_oneof_instance_, bytes_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, data_),
  };
  Metric_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Metric_descriptor_,
      Metric::default_instance_,
      Metric_offsets_,
      -1,
      -1,
      -1,
      Metric_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _oneof_case_[0]),
      sizeof(Metric),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _is_default_instance_));
  Metric_TagsEntry_descriptor_ = Metric_descriptor_->nested_type(0);
  ConfigMap_descriptor_ = file->message_type(6);
  static const int ConfigMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMap, intmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMap, stringmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMap, floatmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMap, boolmap_),
  };
  ConfigMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigMap_descriptor_,
      ConfigMap::default_instance_,
      ConfigMap_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMap, _is_default_instance_));
  ConfigMap_IntMapEntry_descriptor_ = ConfigMap_descriptor_->nested_type(0);
  ConfigMap_StringMapEntry_descriptor_ = ConfigMap_descriptor_->nested_type(1);
  ConfigMap_FloatMapEntry_descriptor_ = ConfigMap_descriptor_->nested_type(2);
  ConfigMap_BoolMapEntry_descriptor_ = ConfigMap_descriptor_->nested_type(3);
  KillArg_descriptor_ = file->message_type(7);
  static const int KillArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillArg, reason_),
  };
  KillArg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KillArg_descriptor_,
      KillArg::default_instance_,
      KillArg_offsets_,
      -1,
      -1,
      -1,
      sizeof(KillArg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillArg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillArg, _is_default_instance_));
  GetConfigPolicyReply_descriptor_ = file->message_type(8);
  static const int GetConfigPolicyReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigPolicyReply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigPolicyReply, bool_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigPolicyReply, float_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigPolicyReply, integer_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigPolicyReply, string_policy_),
  };
  GetConfigPolicyReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetConfigPolicyReply_descriptor_,
      GetConfigPolicyReply::default_instance_,
      GetConfigPolicyReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetConfigPolicyReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigPolicyReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigPolicyReply, _is_default_instance_));
  GetConfigPolicyReply_BoolPolicyEntry_descriptor_ = GetConfigPolicyReply_descriptor_->nested_type(0);
  GetConfigPolicyReply_FloatPolicyEntry_descriptor_ = GetConfigPolicyReply_descriptor_->nested_type(1);
  GetConfigPolicyReply_IntegerPolicyEntry_descriptor_ = GetConfigPolicyReply_descriptor_->nested_type(2);
  GetConfigPolicyReply_StringPolicyEntry_descriptor_ = GetConfigPolicyReply_descriptor_->nested_type(3);
  BoolRule_descriptor_ = file->message_type(9);
  static const int BoolRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolRule, required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolRule, default__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolRule, has_default_),
  };
  BoolRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoolRule_descriptor_,
      BoolRule::default_instance_,
      BoolRule_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoolRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolRule, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolRule, _is_default_instance_));
  BoolPolicy_descriptor_ = file->message_type(10);
  static const int BoolPolicy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolPolicy, rules_),
  };
  BoolPolicy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoolPolicy_descriptor_,
      BoolPolicy::default_instance_,
      BoolPolicy_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoolPolicy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolPolicy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolPolicy, _is_default_instance_));
  BoolPolicy_RulesEntry_descriptor_ = BoolPolicy_descriptor_->nested_type(0);
  FloatRule_descriptor_ = file->message_type(11);
  static const int FloatRule_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, default__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, has_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, has_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, has_max_),
  };
  FloatRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FloatRule_descriptor_,
      FloatRule::default_instance_,
      FloatRule_offsets_,
      -1,
      -1,
      -1,
      sizeof(FloatRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRule, _is_default_instance_));
  FloatPolicy_descriptor_ = file->message_type(12);
  static const int FloatPolicy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatPolicy, rules_),
  };
  FloatPolicy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FloatPolicy_descriptor_,
      FloatPolicy::default_instance_,
      FloatPolicy_offsets_,
      -1,
      -1,
      -1,
      sizeof(FloatPolicy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatPolicy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatPolicy, _is_default_instance_));
  FloatPolicy_RulesEntry_descriptor_ = FloatPolicy_descriptor_->nested_type(0);
  IntegerRule_descriptor_ = file->message_type(13);
  static const int IntegerRule_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, default__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, has_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, has_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, has_max_),
  };
  IntegerRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntegerRule_descriptor_,
      IntegerRule::default_instance_,
      IntegerRule_offsets_,
      -1,
      -1,
      -1,
      sizeof(IntegerRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerRule, _is_default_instance_));
  IntegerPolicy_descriptor_ = file->message_type(14);
  static const int IntegerPolicy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerPolicy, rules_),
  };
  IntegerPolicy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntegerPolicy_descriptor_,
      IntegerPolicy::default_instance_,
      IntegerPolicy_offsets_,
      -1,
      -1,
      -1,
      sizeof(IntegerPolicy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerPolicy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerPolicy, _is_default_instance_));
  IntegerPolicy_RulesEntry_descriptor_ = IntegerPolicy_descriptor_->nested_type(0);
  StringRule_descriptor_ = file->message_type(15);
  static const int StringRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRule, required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRule, default__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRule, has_default_),
  };
  StringRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringRule_descriptor_,
      StringRule::default_instance_,
      StringRule_offsets_,
      -1,
      -1,
      -1,
      sizeof(StringRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRule, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRule, _is_default_instance_));
  StringPolicy_descriptor_ = file->message_type(16);
  static const int StringPolicy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringPolicy, rules_),
  };
  StringPolicy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringPolicy_descriptor_,
      StringPolicy::default_instance_,
      StringPolicy_offsets_,
      -1,
      -1,
      -1,
      sizeof(StringPolicy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringPolicy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringPolicy, _is_default_instance_));
  StringPolicy_RulesEntry_descriptor_ = StringPolicy_descriptor_->nested_type(0);
  MetricsArg_descriptor_ = file->message_type(17);
  static const int MetricsArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsArg, metrics_),
  };
  MetricsArg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MetricsArg_descriptor_,
      MetricsArg::default_instance_,
      MetricsArg_offsets_,
      -1,
      -1,
      -1,
      sizeof(MetricsArg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsArg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsArg, _is_default_instance_));
  MetricsReply_descriptor_ = file->message_type(18);
  static const int MetricsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsReply, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsReply, error_),
  };
  MetricsReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MetricsReply_descriptor_,
      MetricsReply::default_instance_,
      MetricsReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(MetricsReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsReply, _is_default_instance_));
  GetMetricTypesArg_descriptor_ = file->message_type(19);
  static const int GetMetricTypesArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetricTypesArg, config_),
  };
  GetMetricTypesArg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMetricTypesArg_descriptor_,
      GetMetricTypesArg::default_instance_,
      GetMetricTypesArg_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetMetricTypesArg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetricTypesArg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetricTypesArg, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plugin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, &Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrReply_descriptor_, &ErrReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NamespaceElement_descriptor_, &NamespaceElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PubProcArg_descriptor_, &PubProcArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Metric_descriptor_, &Metric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Metric_TagsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Metric_TagsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigMap_descriptor_, &ConfigMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ConfigMap_IntMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                ConfigMap_IntMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ConfigMap_StringMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                ConfigMap_StringMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ConfigMap_FloatMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                ConfigMap_FloatMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ConfigMap_BoolMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            bool,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            0>::CreateDefaultInstance(
                ConfigMap_BoolMapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KillArg_descriptor_, &KillArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetConfigPolicyReply_descriptor_, &GetConfigPolicyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GetConfigPolicyReply_BoolPolicyEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::rpc::BoolPolicy,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GetConfigPolicyReply_BoolPolicyEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GetConfigPolicyReply_FloatPolicyEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::rpc::FloatPolicy,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GetConfigPolicyReply_FloatPolicyEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GetConfigPolicyReply_IntegerPolicyEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::rpc::IntegerPolicy,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GetConfigPolicyReply_IntegerPolicyEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GetConfigPolicyReply_StringPolicyEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::rpc::StringPolicy,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GetConfigPolicyReply_StringPolicyEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoolRule_descriptor_, &BoolRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoolPolicy_descriptor_, &BoolPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        BoolPolicy_RulesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::rpc::BoolRule,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                BoolPolicy_RulesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FloatRule_descriptor_, &FloatRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FloatPolicy_descriptor_, &FloatPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FloatPolicy_RulesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::rpc::FloatRule,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                FloatPolicy_RulesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntegerRule_descriptor_, &IntegerRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntegerPolicy_descriptor_, &IntegerPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        IntegerPolicy_RulesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::rpc::IntegerRule,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                IntegerPolicy_RulesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringRule_descriptor_, &StringRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringPolicy_descriptor_, &StringPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StringPolicy_RulesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::rpc::StringRule,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                StringPolicy_RulesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MetricsArg_descriptor_, &MetricsArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MetricsReply_descriptor_, &MetricsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMetricTypesArg_descriptor_, &GetMetricTypesArg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plugin_2eproto() {
  delete Empty::default_instance_;
  delete Empty_reflection_;
  delete ErrReply::default_instance_;
  delete ErrReply_reflection_;
  delete Time::default_instance_;
  delete Time_reflection_;
  delete NamespaceElement::default_instance_;
  delete NamespaceElement_reflection_;
  delete PubProcArg::default_instance_;
  delete PubProcArg_reflection_;
  delete Metric::default_instance_;
  delete Metric_default_oneof_instance_;
  delete Metric_reflection_;
  delete ConfigMap::default_instance_;
  delete ConfigMap_reflection_;
  delete KillArg::default_instance_;
  delete KillArg_reflection_;
  delete GetConfigPolicyReply::default_instance_;
  delete GetConfigPolicyReply_reflection_;
  delete BoolRule::default_instance_;
  delete BoolRule_reflection_;
  delete BoolPolicy::default_instance_;
  delete BoolPolicy_reflection_;
  delete FloatRule::default_instance_;
  delete FloatRule_reflection_;
  delete FloatPolicy::default_instance_;
  delete FloatPolicy_reflection_;
  delete IntegerRule::default_instance_;
  delete IntegerRule_reflection_;
  delete IntegerPolicy::default_instance_;
  delete IntegerPolicy_reflection_;
  delete StringRule::default_instance_;
  delete StringRule_reflection_;
  delete StringPolicy::default_instance_;
  delete StringPolicy_reflection_;
  delete MetricsArg::default_instance_;
  delete MetricsArg_reflection_;
  delete MetricsReply::default_instance_;
  delete MetricsReply_reflection_;
  delete GetMetricTypesArg::default_instance_;
  delete GetMetricTypesArg_reflection_;
}

void protobuf_AddDesc_plugin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_plugin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014plugin.proto\022\003rpc\"\007\n\005Empty\"\031\n\010ErrReply"
    "\022\r\n\005error\030\001 \001(\t\"!\n\004Time\022\013\n\003sec\030\001 \001(\003\022\014\n\004"
    "nsec\030\002 \001(\003\"D\n\020NamespaceElement\022\r\n\005Value\030"
    "\001 \001(\t\022\023\n\013Description\030\002 \001(\t\022\014\n\004Name\030\003 \001(\t"
    "\"J\n\nPubProcArg\022\034\n\007Metrics\030\001 \003(\0132\013.rpc.Me"
    "tric\022\036\n\006Config\030\002 \001(\0132\016.rpc.ConfigMap\"\256\003\n"
    "\006Metric\022(\n\tNamespace\030\001 \003(\0132\025.rpc.Namespa"
    "ceElement\022\017\n\007Version\030\002 \001(\003\022\036\n\006Config\030\003 \001"
    "(\0132\016.rpc.ConfigMap\022%\n\022LastAdvertisedTime"
    "\030\004 \001(\0132\t.rpc.Time\022#\n\004Tags\030\005 \003(\0132\025.rpc.Me"
    "tric.TagsEntry\022\034\n\tTimestamp\030\006 \001(\0132\t.rpc."
    "Time\022\014\n\004Unit\030\007 \001(\t\022\023\n\013Description\030\010 \001(\t\022"
    "\025\n\013string_data\030\t \001(\tH\000\022\026\n\014float32_data\030\n"
    " \001(\002H\000\022\026\n\014float64_data\030\013 \001(\001H\000\022\024\n\nint32_"
    "data\030\014 \001(\005H\000\022\024\n\nint64_data\030\r \001(\003H\000\022\024\n\nby"
    "tes_data\030\016 \001(\014H\000\032+\n\tTagsEntry\022\013\n\003key\030\001 \001"
    "(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\006\n\004data\"\211\003\n\tConfig"
    "Map\022*\n\006IntMap\030\001 \003(\0132\032.rpc.ConfigMap.IntM"
    "apEntry\0220\n\tStringMap\030\002 \003(\0132\035.rpc.ConfigM"
    "ap.StringMapEntry\022.\n\010FloatMap\030\003 \003(\0132\034.rp"
    "c.ConfigMap.FloatMapEntry\022,\n\007BoolMap\030\004 \003"
    "(\0132\033.rpc.ConfigMap.BoolMapEntry\032-\n\013IntMa"
    "pEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\0320"
    "\n\016StringMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
    " \001(\t:\0028\001\032/\n\rFloatMapEntry\022\013\n\003key\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\001:\0028\001\032.\n\014BoolMapEntry\022\013\n\003key"
    "\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\"\031\n\007KillArg\022\016\n\006"
    "Reason\030\001 \001(\t\"\315\004\n\024GetConfigPolicyReply\022\r\n"
    "\005error\030\001 \001(\t\022>\n\013bool_policy\030\002 \003(\0132).rpc."
    "GetConfigPolicyReply.BoolPolicyEntry\022@\n\014"
    "float_policy\030\003 \003(\0132*.rpc.GetConfigPolicy"
    "Reply.FloatPolicyEntry\022D\n\016integer_policy"
    "\030\004 \003(\0132,.rpc.GetConfigPolicyReply.Intege"
    "rPolicyEntry\022B\n\rstring_policy\030\005 \003(\0132+.rp"
    "c.GetConfigPolicyReply.StringPolicyEntry"
    "\032B\n\017BoolPolicyEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005valu"
    "e\030\002 \001(\0132\017.rpc.BoolPolicy:\0028\001\032D\n\020FloatPol"
    "icyEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.r"
    "pc.FloatPolicy:\0028\001\032H\n\022IntegerPolicyEntry"
    "\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.rpc.Integ"
    "erPolicy:\0028\001\032F\n\021StringPolicyEntry\022\013\n\003key"
    "\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.rpc.StringPolicy"
    ":\0028\001\"B\n\010BoolRule\022\020\n\010required\030\001 \001(\010\022\017\n\007de"
    "fault\030\002 \001(\010\022\023\n\013has_default\030\003 \001(\010\"t\n\nBool"
    "Policy\022)\n\005rules\030\001 \003(\0132\032.rpc.BoolPolicy.R"
    "ulesEntry\032;\n\nRulesEntry\022\013\n\003key\030\001 \001(\t\022\034\n\005"
    "value\030\002 \001(\0132\r.rpc.BoolRule:\0028\001\"\207\001\n\tFloat"
    "Rule\022\020\n\010required\030\001 \001(\010\022\017\n\007minimum\030\002 \001(\001\022"
    "\017\n\007maximum\030\003 \001(\001\022\017\n\007default\030\004 \001(\001\022\023\n\013has"
    "_default\030\005 \001(\010\022\017\n\007has_min\030\006 \001(\010\022\017\n\007has_m"
    "ax\030\007 \001(\010\"w\n\013FloatPolicy\022*\n\005rules\030\001 \003(\0132\033"
    ".rpc.FloatPolicy.RulesEntry\032<\n\nRulesEntr"
    "y\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016.rpc.Floa"
    "tRule:\0028\001\"\211\001\n\013IntegerRule\022\020\n\010required\030\001 "
    "\001(\010\022\017\n\007minimum\030\002 \001(\003\022\017\n\007maximum\030\003 \001(\003\022\017\n"
    "\007default\030\004 \001(\003\022\023\n\013has_default\030\005 \001(\010\022\017\n\007h"
    "as_min\030\006 \001(\010\022\017\n\007has_max\030\007 \001(\010\"}\n\rInteger"
    "Policy\022,\n\005rules\030\001 \003(\0132\035.rpc.IntegerPolic"
    "y.RulesEntry\032>\n\nRulesEntry\022\013\n\003key\030\001 \001(\t\022"
    "\037\n\005value\030\002 \001(\0132\020.rpc.IntegerRule:\0028\001\"D\n\n"
    "StringRule\022\020\n\010required\030\001 \001(\010\022\017\n\007default\030"
    "\002 \001(\t\022\023\n\013has_default\030\003 \001(\010\"z\n\014StringPoli"
    "cy\022+\n\005rules\030\001 \003(\0132\034.rpc.StringPolicy.Rul"
    "esEntry\032=\n\nRulesEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005va"
    "lue\030\002 \001(\0132\017.rpc.StringRule:\0028\001\"*\n\nMetric"
    "sArg\022\034\n\007metrics\030\001 \003(\0132\013.rpc.Metric\";\n\014Me"
    "tricsReply\022\034\n\007metrics\030\001 \003(\0132\013.rpc.Metric"
    "\022\r\n\005error\030\002 \001(\t\"3\n\021GetMetricTypesArg\022\036\n\006"
    "config\030\001 \001(\0132\016.rpc.ConfigMap2\212\002\n\tCollect"
    "or\0226\n\016CollectMetrics\022\017.rpc.MetricsArg\032\021."
    "rpc.MetricsReply\"\000\022=\n\016GetMetricTypes\022\026.r"
    "pc.GetMetricTypesArg\032\021.rpc.MetricsReply\""
    "\000\022#\n\004Ping\022\n.rpc.Empty\032\r.rpc.ErrReply\"\000\022%"
    "\n\004Kill\022\014.rpc.KillArg\032\r.rpc.ErrReply\"\000\022:\n"
    "\017GetConfigPolicy\022\n.rpc.Empty\032\031.rpc.GetCo"
    "nfigPolicyReply\"\0002\304\001\n\tProcessor\022/\n\007Proce"
    "ss\022\017.rpc.PubProcArg\032\021.rpc.MetricsReply\"\000"
    "\022#\n\004Ping\022\n.rpc.Empty\032\r.rpc.ErrReply\"\000\022%\n"
    "\004Kill\022\014.rpc.KillArg\032\r.rpc.ErrReply\"\000\022:\n\017"
    "GetConfigPolicy\022\n.rpc.Empty\032\031.rpc.GetCon"
    "figPolicyReply\"\0002\300\001\n\tPublisher\022+\n\007Publis"
    "h\022\017.rpc.PubProcArg\032\r.rpc.ErrReply\"\000\022#\n\004P"
    "ing\022\n.rpc.Empty\032\r.rpc.ErrReply\"\000\022%\n\004Kill"
    "\022\014.rpc.KillArg\032\r.rpc.ErrReply\"\000\022:\n\017GetCo"
    "nfigPolicy\022\n.rpc.Empty\032\031.rpc.GetConfigPo"
    "licyReply\"\000b\006proto3", 3419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plugin.proto", &protobuf_RegisterTypes);
  Empty::default_instance_ = new Empty();
  ErrReply::default_instance_ = new ErrReply();
  Time::default_instance_ = new Time();
  NamespaceElement::default_instance_ = new NamespaceElement();
  PubProcArg::default_instance_ = new PubProcArg();
  Metric::default_instance_ = new Metric();
  Metric_default_oneof_instance_ = new MetricOneofInstance();
  ConfigMap::default_instance_ = new ConfigMap();
  KillArg::default_instance_ = new KillArg();
  GetConfigPolicyReply::default_instance_ = new GetConfigPolicyReply();
  BoolRule::default_instance_ = new BoolRule();
  BoolPolicy::default_instance_ = new BoolPolicy();
  FloatRule::default_instance_ = new FloatRule();
  FloatPolicy::default_instance_ = new FloatPolicy();
  IntegerRule::default_instance_ = new IntegerRule();
  IntegerPolicy::default_instance_ = new IntegerPolicy();
  StringRule::default_instance_ = new StringRule();
  StringPolicy::default_instance_ = new StringPolicy();
  MetricsArg::default_instance_ = new MetricsArg();
  MetricsReply::default_instance_ = new MetricsReply();
  GetMetricTypesArg::default_instance_ = new GetMetricTypesArg();
  Empty::default_instance_->InitAsDefaultInstance();
  ErrReply::default_instance_->InitAsDefaultInstance();
  Time::default_instance_->InitAsDefaultInstance();
  NamespaceElement::default_instance_->InitAsDefaultInstance();
  PubProcArg::default_instance_->InitAsDefaultInstance();
  Metric::default_instance_->InitAsDefaultInstance();
  ConfigMap::default_instance_->InitAsDefaultInstance();
  KillArg::default_instance_->InitAsDefaultInstance();
  GetConfigPolicyReply::default_instance_->InitAsDefaultInstance();
  BoolRule::default_instance_->InitAsDefaultInstance();
  BoolPolicy::default_instance_->InitAsDefaultInstance();
  FloatRule::default_instance_->InitAsDefaultInstance();
  FloatPolicy::default_instance_->InitAsDefaultInstance();
  IntegerRule::default_instance_->InitAsDefaultInstance();
  IntegerPolicy::default_instance_->InitAsDefaultInstance();
  StringRule::default_instance_->InitAsDefaultInstance();
  StringPolicy::default_instance_->InitAsDefaultInstance();
  MetricsArg::default_instance_->InitAsDefaultInstance();
  MetricsReply::default_instance_->InitAsDefaultInstance();
  GetMetricTypesArg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plugin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plugin_2eproto {
  StaticDescriptorInitializer_plugin_2eproto() {
    protobuf_AddDesc_plugin_2eproto();
  }
} static_descriptor_initializer_plugin_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.Empty)
}

void Empty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.Empty)
}

void Empty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:rpc.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

Empty* Empty::default_instance_ = NULL;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.Empty)
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.Empty)
  // @@protoc_insertion_point(serialize_end:rpc.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:rpc.Empty)
  return target;
}

int Empty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.Empty)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Empty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrReply::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrReply::ErrReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.ErrReply)
}

void ErrReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ErrReply::ErrReply(const ErrReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.ErrReply)
}

void ErrReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ErrReply::~ErrReply() {
  // @@protoc_insertion_point(destructor:rpc.ErrReply)
  SharedDtor();
}

void ErrReply::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ErrReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrReply_descriptor_;
}

const ErrReply& ErrReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

ErrReply* ErrReply::default_instance_ = NULL;

ErrReply* ErrReply::New(::google::protobuf::Arena* arena) const {
  ErrReply* n = new ErrReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.ErrReply)
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ErrReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.ErrReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.ErrReply.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.ErrReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.ErrReply)
  return false;
#undef DO_
}

void ErrReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.ErrReply)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.ErrReply.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.ErrReply)
}

::google::protobuf::uint8* ErrReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ErrReply)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.ErrReply.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.ErrReply)
  return target;
}

int ErrReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.ErrReply)
  int total_size = 0;

  // optional string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.ErrReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ErrReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.ErrReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.ErrReply)
    MergeFrom(*source);
  }
}

void ErrReply::MergeFrom(const ErrReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.ErrReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void ErrReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.ErrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrReply::CopyFrom(const ErrReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.ErrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrReply::IsInitialized() const {

  return true;
}

void ErrReply::Swap(ErrReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrReply::InternalSwap(ErrReply* other) {
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrReply_descriptor_;
  metadata.reflection = ErrReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrReply

// optional string error = 1;
void ErrReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ErrReply::error() const {
  // @@protoc_insertion_point(field_get:rpc.ErrReply.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.ErrReply.error)
}
 void ErrReply::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.ErrReply.error)
}
 void ErrReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.ErrReply.error)
}
 ::std::string* ErrReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:rpc.ErrReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ErrReply::release_error() {
  // @@protoc_insertion_point(field_release:rpc.ErrReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpc.ErrReply.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kSecFieldNumber;
const int Time::kNsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.Time)
}

void Time::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Time::Time(const Time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.Time)
}

void Time::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sec_ = GOOGLE_LONGLONG(0);
  nsec_ = GOOGLE_LONGLONG(0);
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:rpc.Time)
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.Time)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Time, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Time*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sec_, nsec_);

#undef ZR_HELPER_
#undef ZR_

}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nsec;
        break;
      }

      // optional int64 nsec = 2;
      case 2: {
        if (tag == 16) {
         parse_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nsec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.Time)
  // optional int64 sec = 1;
  if (this->sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sec(), output);
  }

  // optional int64 nsec = 2;
  if (this->nsec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nsec(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Time)
  // optional int64 sec = 1;
  if (this->sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sec(), target);
  }

  // optional int64 nsec = 2;
  if (this->nsec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nsec(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.Time)
  return target;
}

int Time::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.Time)
  int total_size = 0;

  // optional int64 sec = 1;
  if (this->sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sec());
  }

  // optional int64 nsec = 2;
  if (this->nsec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nsec());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Time* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sec() != 0) {
    set_sec(from.sec());
  }
  if (from.nsec() != 0) {
    set_nsec(from.nsec());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {

  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  std::swap(sec_, other->sec_);
  std::swap(nsec_, other->nsec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Time

// optional int64 sec = 1;
void Time::clear_sec() {
  sec_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Time::sec() const {
  // @@protoc_insertion_point(field_get:rpc.Time.sec)
  return sec_;
}
 void Time::set_sec(::google::protobuf::int64 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:rpc.Time.sec)
}

// optional int64 nsec = 2;
void Time::clear_nsec() {
  nsec_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Time::nsec() const {
  // @@protoc_insertion_point(field_get:rpc.Time.nsec)
  return nsec_;
}
 void Time::set_nsec(::google::protobuf::int64 value) {
  
  nsec_ = value;
  // @@protoc_insertion_point(field_set:rpc.Time.nsec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamespaceElement::kValueFieldNumber;
const int NamespaceElement::kDescriptionFieldNumber;
const int NamespaceElement::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamespaceElement::NamespaceElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.NamespaceElement)
}

void NamespaceElement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NamespaceElement::NamespaceElement(const NamespaceElement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.NamespaceElement)
}

void NamespaceElement::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NamespaceElement::~NamespaceElement() {
  // @@protoc_insertion_point(destructor:rpc.NamespaceElement)
  SharedDtor();
}

void NamespaceElement::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NamespaceElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamespaceElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamespaceElement_descriptor_;
}

const NamespaceElement& NamespaceElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

NamespaceElement* NamespaceElement::default_instance_ = NULL;

NamespaceElement* NamespaceElement::New(::google::protobuf::Arena* arena) const {
  NamespaceElement* n = new NamespaceElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NamespaceElement::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.NamespaceElement)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NamespaceElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.NamespaceElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.NamespaceElement.Value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Description;
        break;
      }

      // optional string Description = 2;
      case 2: {
        if (tag == 18) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.NamespaceElement.Description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (tag == 26) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.NamespaceElement.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.NamespaceElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.NamespaceElement)
  return false;
#undef DO_
}

void NamespaceElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.NamespaceElement)
  // optional string Value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.NamespaceElement.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // optional string Description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.NamespaceElement.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.NamespaceElement.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.NamespaceElement)
}

::google::protobuf::uint8* NamespaceElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.NamespaceElement)
  // optional string Value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.NamespaceElement.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional string Description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.NamespaceElement.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.NamespaceElement.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.NamespaceElement)
  return target;
}

int NamespaceElement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.NamespaceElement)
  int total_size = 0;

  // optional string Value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional string Description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamespaceElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.NamespaceElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NamespaceElement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NamespaceElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.NamespaceElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.NamespaceElement)
    MergeFrom(*source);
  }
}

void NamespaceElement::MergeFrom(const NamespaceElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.NamespaceElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NamespaceElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.NamespaceElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamespaceElement::CopyFrom(const NamespaceElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.NamespaceElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamespaceElement::IsInitialized() const {

  return true;
}

void NamespaceElement::Swap(NamespaceElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamespaceElement::InternalSwap(NamespaceElement* other) {
  value_.Swap(&other->value_);
  description_.Swap(&other->description_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NamespaceElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamespaceElement_descriptor_;
  metadata.reflection = NamespaceElement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NamespaceElement

// optional string Value = 1;
void NamespaceElement::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NamespaceElement::value() const {
  // @@protoc_insertion_point(field_get:rpc.NamespaceElement.Value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamespaceElement::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.NamespaceElement.Value)
}
 void NamespaceElement::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.NamespaceElement.Value)
}
 void NamespaceElement::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.NamespaceElement.Value)
}
 ::std::string* NamespaceElement::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:rpc.NamespaceElement.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NamespaceElement::release_value() {
  // @@protoc_insertion_point(field_release:rpc.NamespaceElement.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamespaceElement::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:rpc.NamespaceElement.Value)
}

// optional string Description = 2;
void NamespaceElement::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NamespaceElement::description() const {
  // @@protoc_insertion_point(field_get:rpc.NamespaceElement.Description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamespaceElement::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.NamespaceElement.Description)
}
 void NamespaceElement::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.NamespaceElement.Description)
}
 void NamespaceElement::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.NamespaceElement.Description)
}
 ::std::string* NamespaceElement::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:rpc.NamespaceElement.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NamespaceElement::release_description() {
  // @@protoc_insertion_point(field_release:rpc.NamespaceElement.Description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamespaceElement::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:rpc.NamespaceElement.Description)
}

// optional string Name = 3;
void NamespaceElement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NamespaceElement::name() const {
  // @@protoc_insertion_point(field_get:rpc.NamespaceElement.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamespaceElement::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.NamespaceElement.Name)
}
 void NamespaceElement::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.NamespaceElement.Name)
}
 void NamespaceElement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.NamespaceElement.Name)
}
 ::std::string* NamespaceElement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rpc.NamespaceElement.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NamespaceElement::release_name() {
  // @@protoc_insertion_point(field_release:rpc.NamespaceElement.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamespaceElement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpc.NamespaceElement.Name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PubProcArg::kMetricsFieldNumber;
const int PubProcArg::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PubProcArg::PubProcArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.PubProcArg)
}

void PubProcArg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  config_ = const_cast< ::rpc::ConfigMap*>(&::rpc::ConfigMap::default_instance());
}

PubProcArg::PubProcArg(const PubProcArg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.PubProcArg)
}

void PubProcArg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  config_ = NULL;
}

PubProcArg::~PubProcArg() {
  // @@protoc_insertion_point(destructor:rpc.PubProcArg)
  SharedDtor();
}

void PubProcArg::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void PubProcArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubProcArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubProcArg_descriptor_;
}

const PubProcArg& PubProcArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

PubProcArg* PubProcArg::default_instance_ = NULL;

PubProcArg* PubProcArg::New(::google::protobuf::Arena* arena) const {
  PubProcArg* n = new PubProcArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PubProcArg::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.PubProcArg)
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
  metrics_.Clear();
}

bool PubProcArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.PubProcArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Metric Metrics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Metrics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_Config;
        break;
      }

      // optional .rpc.ConfigMap Config = 2;
      case 2: {
        if (tag == 18) {
         parse_Config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.PubProcArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.PubProcArg)
  return false;
#undef DO_
}

void PubProcArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.PubProcArg)
  // repeated .rpc.Metric Metrics = 1;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metrics(i), output);
  }

  // optional .rpc.ConfigMap Config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.PubProcArg)
}

::google::protobuf::uint8* PubProcArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.PubProcArg)
  // repeated .rpc.Metric Metrics = 1;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->metrics(i), false, target);
  }

  // optional .rpc.ConfigMap Config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.PubProcArg)
  return target;
}

int PubProcArg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.PubProcArg)
  int total_size = 0;

  // optional .rpc.ConfigMap Config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // repeated .rpc.Metric Metrics = 1;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubProcArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.PubProcArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PubProcArg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PubProcArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.PubProcArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.PubProcArg)
    MergeFrom(*source);
  }
}

void PubProcArg::MergeFrom(const PubProcArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.PubProcArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  metrics_.MergeFrom(from.metrics_);
  if (from.has_config()) {
    mutable_config()->::rpc::ConfigMap::MergeFrom(from.config());
  }
}

void PubProcArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.PubProcArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubProcArg::CopyFrom(const PubProcArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.PubProcArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubProcArg::IsInitialized() const {

  return true;
}

void PubProcArg::Swap(PubProcArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PubProcArg::InternalSwap(PubProcArg* other) {
  metrics_.UnsafeArenaSwap(&other->metrics_);
  std::swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PubProcArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubProcArg_descriptor_;
  metadata.reflection = PubProcArg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PubProcArg

// repeated .rpc.Metric Metrics = 1;
int PubProcArg::metrics_size() const {
  return metrics_.size();
}
void PubProcArg::clear_metrics() {
  metrics_.Clear();
}
const ::rpc::Metric& PubProcArg::metrics(int index) const {
  // @@protoc_insertion_point(field_get:rpc.PubProcArg.Metrics)
  return metrics_.Get(index);
}
::rpc::Metric* PubProcArg::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.PubProcArg.Metrics)
  return metrics_.Mutable(index);
}
::rpc::Metric* PubProcArg::add_metrics() {
  // @@protoc_insertion_point(field_add:rpc.PubProcArg.Metrics)
  return metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
PubProcArg::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:rpc.PubProcArg.Metrics)
  return &metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
PubProcArg::metrics() const {
  // @@protoc_insertion_point(field_list:rpc.PubProcArg.Metrics)
  return metrics_;
}

// optional .rpc.ConfigMap Config = 2;
bool PubProcArg::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
void PubProcArg::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::rpc::ConfigMap& PubProcArg::config() const {
  // @@protoc_insertion_point(field_get:rpc.PubProcArg.Config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::rpc::ConfigMap* PubProcArg::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::rpc::ConfigMap;
  }
  // @@protoc_insertion_point(field_mutable:rpc.PubProcArg.Config)
  return config_;
}
::rpc::ConfigMap* PubProcArg::release_config() {
  // @@protoc_insertion_point(field_release:rpc.PubProcArg.Config)
  
  ::rpc::ConfigMap* temp = config_;
  config_ = NULL;
  return temp;
}
void PubProcArg::set_allocated_config(::rpc::ConfigMap* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.PubProcArg.Config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metric::kNamespaceFieldNumber;
const int Metric::kVersionFieldNumber;
const int Metric::kConfigFieldNumber;
const int Metric::kLastAdvertisedTimeFieldNumber;
const int Metric::kTagsFieldNumber;
const int Metric::kTimestampFieldNumber;
const int Metric::kUnitFieldNumber;
const int Metric::kDescriptionFieldNumber;
const int Metric::kStringDataFieldNumber;
const int Metric::kFloat32DataFieldNumber;
const int Metric::kFloat64DataFieldNumber;
const int Metric::kInt32DataFieldNumber;
const int Metric::kInt64DataFieldNumber;
const int Metric::kBytesDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metric::Metric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.Metric)
}

void Metric::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  config_ = const_cast< ::rpc::ConfigMap*>(&::rpc::ConfigMap::default_instance());
  lastadvertisedtime_ = const_cast< ::rpc::Time*>(&::rpc::Time::default_instance());
  timestamp_ = const_cast< ::rpc::Time*>(&::rpc::Time::default_instance());
  Metric_default_oneof_instance_->string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Metric_default_oneof_instance_->float32_data_ = 0;
  Metric_default_oneof_instance_->float64_data_ = 0;
  Metric_default_oneof_instance_->int32_data_ = 0;
  Metric_default_oneof_instance_->int64_data_ = GOOGLE_LONGLONG(0);
  Metric_default_oneof_instance_->bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Metric::Metric(const Metric& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.Metric)
}

void Metric::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  config_ = NULL;
  lastadvertisedtime_ = NULL;
  tags_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tags_.SetEntryDescriptor(
      &::rpc::Metric_TagsEntry_descriptor_);
  timestamp_ = NULL;
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:rpc.Metric)
  SharedDtor();
}

void Metric::SharedDtor() {
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
  if (this != default_instance_) {
    delete config_;
    delete lastadvertisedtime_;
    delete timestamp_;
  }
}

void Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metric_descriptor_;
}

const Metric& Metric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

Metric* Metric::default_instance_ = NULL;

Metric* Metric::New(::google::protobuf::Arena* arena) const {
  Metric* n = new Metric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metric::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:rpc.Metric)
  switch(data_case()) {
    case kStringData: {
      data_.string_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFloat32Data: {
      // No need to clear
      break;
    }
    case kFloat64Data: {
      // No need to clear
      break;
    }
    case kInt32Data: {
      // No need to clear
      break;
    }
    case kInt64Data: {
      // No need to clear
      break;
    }
    case kBytesData: {
      data_.bytes_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.Metric)
  version_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && lastadvertisedtime_ != NULL) delete lastadvertisedtime_;
  lastadvertisedtime_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.Clear();
  tags_.Clear();
  clear_data();
}

bool Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.Metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.NamespaceElement Namespace = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_namespace_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Namespace;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional int64 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Config;
        break;
      }

      // optional .rpc.ConfigMap Config = 3;
      case 3: {
        if (tag == 26) {
         parse_Config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_LastAdvertisedTime;
        break;
      }

      // optional .rpc.Time LastAdvertisedTime = 4;
      case 4: {
        if (tag == 34) {
         parse_LastAdvertisedTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastadvertisedtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Tags;
        break;
      }

      // map<string, string> Tags = 5;
      case 5: {
        if (tag == 42) {
         parse_Tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Tags:
          Metric_TagsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&tags_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.Metric.TagsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.Metric.TagsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_Tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_Timestamp;
        break;
      }

      // optional .rpc.Time Timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_Timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Unit;
        break;
      }

      // optional string Unit = 7;
      case 7: {
        if (tag == 58) {
         parse_Unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.Metric.Unit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Description;
        break;
      }

      // optional string Description = 8;
      case 8: {
        if (tag == 66) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.Metric.Description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_string_data;
        break;
      }

      // optional string string_data = 9;
      case 9: {
        if (tag == 74) {
         parse_string_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_data().data(), this->string_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.Metric.string_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_float32_data;
        break;
      }

      // optional float float32_data = 10;
      case 10: {
        if (tag == 85) {
         parse_float32_data:
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_.float32_data_)));
          set_has_float32_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_float64_data;
        break;
      }

      // optional double float64_data = 11;
      case 11: {
        if (tag == 89) {
         parse_float64_data:
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_.float64_data_)));
          set_has_float64_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_int32_data;
        break;
      }

      // optional int32 int32_data = 12;
      case 12: {
        if (tag == 96) {
         parse_int32_data:
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_.int32_data_)));
          set_has_int32_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_int64_data;
        break;
      }

      // optional int64 int64_data = 13;
      case 13: {
        if (tag == 104) {
         parse_int64_data:
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_.int64_data_)));
          set_has_int64_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bytes_data;
        break;
      }

      // optional bytes bytes_data = 14;
      case 14: {
        if (tag == 114) {
         parse_bytes_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.Metric)
  return false;
#undef DO_
}

void Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.Metric)
  // repeated .rpc.NamespaceElement Namespace = 1;
  for (unsigned int i = 0, n = this->namespace__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespace_(i), output);
  }

  // optional int64 Version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // optional .rpc.ConfigMap Config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  // optional .rpc.Time LastAdvertisedTime = 4;
  if (this->has_lastadvertisedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lastadvertisedtime_, output);
  }

  // map<string, string> Tags = 5;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.Metric.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.Metric.TagsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->tags().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .rpc.Time Timestamp = 6;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->timestamp_, output);
  }

  // optional string Unit = 7;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.Metric.Unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->unit(), output);
  }

  // optional string Description = 8;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.Metric.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->description(), output);
  }

  // optional string string_data = 9;
  if (has_string_data()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_data().data(), this->string_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.Metric.string_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->string_data(), output);
  }

  // optional float float32_data = 10;
  if (has_float32_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->float32_data(), output);
  }

  // optional double float64_data = 11;
  if (has_float64_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->float64_data(), output);
  }

  // optional int32 int32_data = 12;
  if (has_int32_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->int32_data(), output);
  }

  // optional int64 int64_data = 13;
  if (has_int64_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->int64_data(), output);
  }

  // optional bytes bytes_data = 14;
  if (has_bytes_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->bytes_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.Metric)
}

::google::protobuf::uint8* Metric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Metric)
  // repeated .rpc.NamespaceElement Namespace = 1;
  for (unsigned int i = 0, n = this->namespace__size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->namespace_(i), false, target);
  }

  // optional int64 Version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // optional .rpc.ConfigMap Config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, false, target);
  }

  // optional .rpc.Time LastAdvertisedTime = 4;
  if (this->has_lastadvertisedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lastadvertisedtime_, false, target);
  }

  // map<string, string> Tags = 5;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.Metric.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.Metric.TagsEntry.value");
      }
    };

    if (deterministic &&
        this->tags().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .rpc.Time Timestamp = 6;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->timestamp_, false, target);
  }

  // optional string Unit = 7;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.Metric.Unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->unit(), target);
  }

  // optional string Description = 8;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.Metric.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->description(), target);
  }

  // optional string string_data = 9;
  if (has_string_data()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_data().data(), this->string_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.Metric.string_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->string_data(), target);
  }

  // optional float float32_data = 10;
  if (has_float32_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->float32_data(), target);
  }

  // optional double float64_data = 11;
  if (has_float64_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->float64_data(), target);
  }

  // optional int32 int32_data = 12;
  if (has_int32_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->int32_data(), target);
  }

  // optional int64 int64_data = 13;
  if (has_int64_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->int64_data(), target);
  }

  // optional bytes bytes_data = 14;
  if (has_bytes_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->bytes_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.Metric)
  return target;
}

int Metric::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.Metric)
  int total_size = 0;

  // optional int64 Version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  // optional .rpc.ConfigMap Config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // optional .rpc.Time LastAdvertisedTime = 4;
  if (this->has_lastadvertisedtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lastadvertisedtime_);
  }

  // optional .rpc.Time Timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // optional string Unit = 7;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // optional string Description = 8;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // repeated .rpc.NamespaceElement Namespace = 1;
  total_size += 1 * this->namespace__size();
  for (int i = 0; i < this->namespace__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namespace_(i));
  }

  // map<string, string> Tags = 5;
  total_size += 1 * this->tags_size();
  {
    ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->tags().begin();
        it != this->tags().end(); ++it) {
      entry.reset(tags_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  switch (data_case()) {
    // optional string string_data = 9;
    case kStringData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_data());
      break;
    }
    // optional float float32_data = 10;
    case kFloat32Data: {
      total_size += 1 + 4;
      break;
    }
    // optional double float64_data = 11;
    case kFloat64Data: {
      total_size += 1 + 8;
      break;
    }
    // optional int32 int32_data = 12;
    case kInt32Data: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_data());
      break;
    }
    // optional int64 int64_data = 13;
    case kInt64Data: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_data());
      break;
    }
    // optional bytes bytes_data = 14;
    case kBytesData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.Metric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Metric* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Metric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.Metric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  namespace__.MergeFrom(from.namespace__);
  tags_.MergeFrom(from.tags_);
  switch (from.data_case()) {
    case kStringData: {
      set_string_data(from.string_data());
      break;
    }
    case kFloat32Data: {
      set_float32_data(from.float32_data());
      break;
    }
    case kFloat64Data: {
      set_float64_data(from.float64_data());
      break;
    }
    case kInt32Data: {
      set_int32_data(from.int32_data());
      break;
    }
    case kInt64Data: {
      set_int64_data(from.int64_data());
      break;
    }
    case kBytesData: {
      set_bytes_data(from.bytes_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.has_config()) {
    mutable_config()->::rpc::ConfigMap::MergeFrom(from.config());
  }
  if (from.has_lastadvertisedtime()) {
    mutable_lastadvertisedtime()->::rpc::Time::MergeFrom(from.lastadvertisedtime());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::rpc::Time::MergeFrom(from.timestamp());
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void Metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {

  return true;
}

void Metric::Swap(Metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metric::InternalSwap(Metric* other) {
  namespace__.UnsafeArenaSwap(&other->namespace__);
  std::swap(version_, other->version_);
  std::swap(config_, other->config_);
  std::swap(lastadvertisedtime_, other->lastadvertisedtime_);
  tags_.Swap(&other->tags_);
  std::swap(timestamp_, other->timestamp_);
  unit_.Swap(&other->unit_);
  description_.Swap(&other->description_);
  std::swap(data_, other->data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metric_descriptor_;
  metadata.reflection = Metric_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metric

// repeated .rpc.NamespaceElement Namespace = 1;
int Metric::namespace__size() const {
  return namespace__.size();
}
void Metric::clear_namespace_() {
  namespace__.Clear();
}
const ::rpc::NamespaceElement& Metric::namespace_(int index) const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Namespace)
  return namespace__.Get(index);
}
::rpc::NamespaceElement* Metric::mutable_namespace_(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Namespace)
  return namespace__.Mutable(index);
}
::rpc::NamespaceElement* Metric::add_namespace_() {
  // @@protoc_insertion_point(field_add:rpc.Metric.Namespace)
  return namespace__.Add();
}
::google::protobuf::RepeatedPtrField< ::rpc::NamespaceElement >*
Metric::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable_list:rpc.Metric.Namespace)
  return &namespace__;
}
const ::google::protobuf::RepeatedPtrField< ::rpc::NamespaceElement >&
Metric::namespace_() const {
  // @@protoc_insertion_point(field_list:rpc.Metric.Namespace)
  return namespace__;
}

// optional int64 Version = 2;
void Metric::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Metric::version() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Version)
  return version_;
}
 void Metric::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.Version)
}

// optional .rpc.ConfigMap Config = 3;
bool Metric::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
void Metric::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::rpc::ConfigMap& Metric::config() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::rpc::ConfigMap* Metric::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::rpc::ConfigMap;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Config)
  return config_;
}
::rpc::ConfigMap* Metric::release_config() {
  // @@protoc_insertion_point(field_release:rpc.Metric.Config)
  
  ::rpc::ConfigMap* temp = config_;
  config_ = NULL;
  return temp;
}
void Metric::set_allocated_config(::rpc::ConfigMap* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.Config)
}

// optional .rpc.Time LastAdvertisedTime = 4;
bool Metric::has_lastadvertisedtime() const {
  return !_is_default_instance_ && lastadvertisedtime_ != NULL;
}
void Metric::clear_lastadvertisedtime() {
  if (GetArenaNoVirtual() == NULL && lastadvertisedtime_ != NULL) delete lastadvertisedtime_;
  lastadvertisedtime_ = NULL;
}
const ::rpc::Time& Metric::lastadvertisedtime() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.LastAdvertisedTime)
  return lastadvertisedtime_ != NULL ? *lastadvertisedtime_ : *default_instance_->lastadvertisedtime_;
}
::rpc::Time* Metric::mutable_lastadvertisedtime() {
  
  if (lastadvertisedtime_ == NULL) {
    lastadvertisedtime_ = new ::rpc::Time;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.LastAdvertisedTime)
  return lastadvertisedtime_;
}
::rpc::Time* Metric::release_lastadvertisedtime() {
  // @@protoc_insertion_point(field_release:rpc.Metric.LastAdvertisedTime)
  
  ::rpc::Time* temp = lastadvertisedtime_;
  lastadvertisedtime_ = NULL;
  return temp;
}
void Metric::set_allocated_lastadvertisedtime(::rpc::Time* lastadvertisedtime) {
  delete lastadvertisedtime_;
  lastadvertisedtime_ = lastadvertisedtime;
  if (lastadvertisedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.LastAdvertisedTime)
}

// map<string, string> Tags = 5;
int Metric::tags_size() const {
  return tags_.size();
}
void Metric::clear_tags() {
  tags_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Metric::tags() const {
  // @@protoc_insertion_point(field_map:rpc.Metric.Tags)
  return tags_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Metric::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:rpc.Metric.Tags)
  return tags_.MutableMap();
}

// optional .rpc.Time Timestamp = 6;
bool Metric::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void Metric::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::rpc::Time& Metric::timestamp() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::rpc::Time* Metric::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::rpc::Time;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Timestamp)
  return timestamp_;
}
::rpc::Time* Metric::release_timestamp() {
  // @@protoc_insertion_point(field_release:rpc.Metric.Timestamp)
  
  ::rpc::Time* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Metric::set_allocated_timestamp(::rpc::Time* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.Timestamp)
}

// optional string Unit = 7;
void Metric::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Metric::unit() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metric::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.Metric.Unit)
}
 void Metric::set_unit(const char* value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.Metric.Unit)
}
 void Metric::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.Metric.Unit)
}
 ::std::string* Metric::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metric::release_unit() {
  // @@protoc_insertion_point(field_release:rpc.Metric.Unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metric::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.Unit)
}

// optional string Description = 8;
void Metric::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Metric::description() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.Description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metric::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.Metric.Description)
}
 void Metric::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.Metric.Description)
}
 void Metric::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.Metric.Description)
}
 ::std::string* Metric::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:rpc.Metric.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metric::release_description() {
  // @@protoc_insertion_point(field_release:rpc.Metric.Description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metric::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.Description)
}

// optional string string_data = 9;
bool Metric::has_string_data() const {
  return data_case() == kStringData;
}
void Metric::set_has_string_data() {
  _oneof_case_[0] = kStringData;
}
void Metric::clear_string_data() {
  if (has_string_data()) {
    data_.string_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
 const ::std::string& Metric::string_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.string_data)
  if (has_string_data()) {
    return data_.string_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Metric::set_string_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.Metric.string_data)
  if (!has_string_data()) {
    clear_data();
    set_has_string_data();
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.Metric.string_data)
}
 void Metric::set_string_data(const char* value) {
  if (!has_string_data()) {
    clear_data();
    set_has_string_data();
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.Metric.string_data)
}
 void Metric::set_string_data(const char* value, size_t size) {
  if (!has_string_data()) {
    clear_data();
    set_has_string_data();
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.Metric.string_data)
}
 ::std::string* Metric::mutable_string_data() {
  if (!has_string_data()) {
    clear_data();
    set_has_string_data();
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.string_data)
  return data_.string_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metric::release_string_data() {
  // @@protoc_insertion_point(field_release:rpc.Metric.string_data)
  if (has_string_data()) {
    clear_has_data();
    return data_.string_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Metric::set_allocated_string_data(::std::string* string_data) {
  if (!has_string_data()) {
    data_.string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (string_data != NULL) {
    set_has_string_data();
    data_.string_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_data);
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.string_data)
}

// optional float float32_data = 10;
bool Metric::has_float32_data() const {
  return data_case() == kFloat32Data;
}
void Metric::set_has_float32_data() {
  _oneof_case_[0] = kFloat32Data;
}
void Metric::clear_float32_data() {
  if (has_float32_data()) {
    data_.float32_data_ = 0;
    clear_has_data();
  }
}
 float Metric::float32_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.float32_data)
  if (has_float32_data()) {
    return data_.float32_data_;
  }
  return 0;
}
 void Metric::set_float32_data(float value) {
  if (!has_float32_data()) {
    clear_data();
    set_has_float32_data();
  }
  data_.float32_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.float32_data)
}

// optional double float64_data = 11;
bool Metric::has_float64_data() const {
  return data_case() == kFloat64Data;
}
void Metric::set_has_float64_data() {
  _oneof_case_[0] = kFloat64Data;
}
void Metric::clear_float64_data() {
  if (has_float64_data()) {
    data_.float64_data_ = 0;
    clear_has_data();
  }
}
 double Metric::float64_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.float64_data)
  if (has_float64_data()) {
    return data_.float64_data_;
  }
  return 0;
}
 void Metric::set_float64_data(double value) {
  if (!has_float64_data()) {
    clear_data();
    set_has_float64_data();
  }
  data_.float64_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.float64_data)
}

// optional int32 int32_data = 12;
bool Metric::has_int32_data() const {
  return data_case() == kInt32Data;
}
void Metric::set_has_int32_data() {
  _oneof_case_[0] = kInt32Data;
}
void Metric::clear_int32_data() {
  if (has_int32_data()) {
    data_.int32_data_ = 0;
    clear_has_data();
  }
}
 ::google::protobuf::int32 Metric::int32_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.int32_data)
  if (has_int32_data()) {
    return data_.int32_data_;
  }
  return 0;
}
 void Metric::set_int32_data(::google::protobuf::int32 value) {
  if (!has_int32_data()) {
    clear_data();
    set_has_int32_data();
  }
  data_.int32_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.int32_data)
}

// optional int64 int64_data = 13;
bool Metric::has_int64_data() const {
  return data_case() == kInt64Data;
}
void Metric::set_has_int64_data() {
  _oneof_case_[0] = kInt64Data;
}
void Metric::clear_int64_data() {
  if (has_int64_data()) {
    data_.int64_data_ = GOOGLE_LONGLONG(0);
    clear_has_data();
  }
}
 ::google::protobuf::int64 Metric::int64_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.int64_data)
  if (has_int64_data()) {
    return data_.int64_data_;
  }
  return GOOGLE_LONGLONG(0);
}
 void Metric::set_int64_data(::google::protobuf::int64 value) {
  if (!has_int64_data()) {
    clear_data();
    set_has_int64_data();
  }
  data_.int64_data_ = value;
  // @@protoc_insertion_point(field_set:rpc.Metric.int64_data)
}

// optional bytes bytes_data = 14;
bool Metric::has_bytes_data() const {
  return data_case() == kBytesData;
}
void Metric::set_has_bytes_data() {
  _oneof_case_[0] = kBytesData;
}
void Metric::clear_bytes_data() {
  if (has_bytes_data()) {
    data_.bytes_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
 const ::std::string& Metric::bytes_data() const {
  // @@protoc_insertion_point(field_get:rpc.Metric.bytes_data)
  if (has_bytes_data()) {
    return data_.bytes_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Metric::set_bytes_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.Metric.bytes_data)
  if (!has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bytes_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.Metric.bytes_data)
}
 void Metric::set_bytes_data(const char* value) {
  if (!has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bytes_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.Metric.bytes_data)
}
 void Metric::set_bytes_data(const void* value, size_t size) {
  if (!has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bytes_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.Metric.bytes_data)
}
 ::std::string* Metric::mutable_bytes_data() {
  if (!has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:rpc.Metric.bytes_data)
  return data_.bytes_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metric::release_bytes_data() {
  // @@protoc_insertion_point(field_release:rpc.Metric.bytes_data)
  if (has_bytes_data()) {
    clear_has_data();
    return data_.bytes_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Metric::set_allocated_bytes_data(::std::string* bytes_data) {
  if (!has_bytes_data()) {
    data_.bytes_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (bytes_data != NULL) {
    set_has_bytes_data();
    data_.bytes_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bytes_data);
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Metric.bytes_data)
}

bool Metric::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void Metric::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
Metric::DataCase Metric::data_case() const {
  return Metric::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMap::kIntMapFieldNumber;
const int ConfigMap::kStringMapFieldNumber;
const int ConfigMap::kFloatMapFieldNumber;
const int ConfigMap::kBoolMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMap::ConfigMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.ConfigMap)
}

void ConfigMap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConfigMap::ConfigMap(const ConfigMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.ConfigMap)
}

void ConfigMap::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  intmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  intmap_.SetEntryDescriptor(
      &::rpc::ConfigMap_IntMapEntry_descriptor_);
  stringmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  stringmap_.SetEntryDescriptor(
      &::rpc::ConfigMap_StringMapEntry_descriptor_);
  floatmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  floatmap_.SetEntryDescriptor(
      &::rpc::ConfigMap_FloatMapEntry_descriptor_);
  boolmap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  boolmap_.SetEntryDescriptor(
      &::rpc::ConfigMap_BoolMapEntry_descriptor_);
}

ConfigMap::~ConfigMap() {
  // @@protoc_insertion_point(destructor:rpc.ConfigMap)
  SharedDtor();
}

void ConfigMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigMap_descriptor_;
}

const ConfigMap& ConfigMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

ConfigMap* ConfigMap::default_instance_ = NULL;

ConfigMap* ConfigMap::New(::google::protobuf::Arena* arena) const {
  ConfigMap* n = new ConfigMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigMap::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.ConfigMap)
  intmap_.Clear();
  stringmap_.Clear();
  floatmap_.Clear();
  boolmap_.Clear();
}

bool ConfigMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.ConfigMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, int64> IntMap = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_IntMap:
          ConfigMap_IntMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&intmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.ConfigMap.IntMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_IntMap;
        if (input->ExpectTag(18)) goto parse_loop_StringMap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> StringMap = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_StringMap:
          ConfigMap_StringMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&stringmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.ConfigMap.StringMapEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.ConfigMap.StringMapEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_StringMap;
        if (input->ExpectTag(26)) goto parse_loop_FloatMap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, double> FloatMap = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_FloatMap:
          ConfigMap_FloatMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&floatmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.ConfigMap.FloatMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_FloatMap;
        if (input->ExpectTag(34)) goto parse_loop_BoolMap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, bool> BoolMap = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_BoolMap:
          ConfigMap_BoolMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&boolmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.ConfigMap.BoolMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_BoolMap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.ConfigMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.ConfigMap)
  return false;
#undef DO_
}

void ConfigMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.ConfigMap)
  // map<string, int64> IntMap = 1;
  if (!this->intmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.IntMapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->intmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->intmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->intmap().begin();
          it != this->intmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigMap_IntMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(intmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigMap_IntMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->intmap().begin();
          it != this->intmap().end(); ++it) {
        entry.reset(intmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> StringMap = 2;
  if (!this->stringmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.StringMapEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.StringMapEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->stringmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->stringmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->stringmap().begin();
          it != this->stringmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigMap_StringMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stringmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigMap_StringMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->stringmap().begin();
          it != this->stringmap().end(); ++it) {
        entry.reset(stringmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> FloatMap = 3;
  if (!this->floatmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.FloatMapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->floatmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->floatmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->floatmap().begin();
          it != this->floatmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigMap_FloatMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(floatmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigMap_FloatMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->floatmap().begin();
          it != this->floatmap().end(); ++it) {
        entry.reset(floatmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bool> BoolMap = 4;
  if (!this->boolmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.BoolMapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->boolmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->boolmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->boolmap().begin();
          it != this->boolmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigMap_BoolMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(boolmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigMap_BoolMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->boolmap().begin();
          it != this->boolmap().end(); ++it) {
        entry.reset(boolmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:rpc.ConfigMap)
}

::google::protobuf::uint8* ConfigMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ConfigMap)
  // map<string, int64> IntMap = 1;
  if (!this->intmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.IntMapEntry.key");
      }
    };

    if (deterministic &&
        this->intmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->intmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->intmap().begin();
          it != this->intmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigMap_IntMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(intmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigMap_IntMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->intmap().begin();
          it != this->intmap().end(); ++it) {
        entry.reset(intmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> StringMap = 2;
  if (!this->stringmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.StringMapEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.StringMapEntry.value");
      }
    };

    if (deterministic &&
        this->stringmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->stringmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->stringmap().begin();
          it != this->stringmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigMap_StringMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stringmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigMap_StringMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->stringmap().begin();
          it != this->stringmap().end(); ++it) {
        entry.reset(stringmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> FloatMap = 3;
  if (!this->floatmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.FloatMapEntry.key");
      }
    };

    if (deterministic &&
        this->floatmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->floatmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->floatmap().begin();
          it != this->floatmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigMap_FloatMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(floatmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigMap_FloatMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->floatmap().begin();
          it != this->floatmap().end(); ++it) {
        entry.reset(floatmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bool> BoolMap = 4;
  if (!this->boolmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.ConfigMap.BoolMapEntry.key");
      }
    };

    if (deterministic &&
        this->boolmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->boolmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->boolmap().begin();
          it != this->boolmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigMap_BoolMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(boolmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigMap_BoolMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->boolmap().begin();
          it != this->boolmap().end(); ++it) {
        entry.reset(boolmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.ConfigMap)
  return target;
}

int ConfigMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.ConfigMap)
  int total_size = 0;

  // map<string, int64> IntMap = 1;
  total_size += 1 * this->intmap_size();
  {
    ::google::protobuf::scoped_ptr<ConfigMap_IntMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->intmap().begin();
        it != this->intmap().end(); ++it) {
      entry.reset(intmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> StringMap = 2;
  total_size += 1 * this->stringmap_size();
  {
    ::google::protobuf::scoped_ptr<ConfigMap_StringMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->stringmap().begin();
        it != this->stringmap().end(); ++it) {
      entry.reset(stringmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, double> FloatMap = 3;
  total_size += 1 * this->floatmap_size();
  {
    ::google::protobuf::scoped_ptr<ConfigMap_FloatMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->floatmap().begin();
        it != this->floatmap().end(); ++it) {
      entry.reset(floatmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, bool> BoolMap = 4;
  total_size += 1 * this->boolmap_size();
  {
    ::google::protobuf::scoped_ptr<ConfigMap_BoolMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->boolmap().begin();
        it != this->boolmap().end(); ++it) {
      entry.reset(boolmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.ConfigMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.ConfigMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.ConfigMap)
    MergeFrom(*source);
  }
}

void ConfigMap::MergeFrom(const ConfigMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.ConfigMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  intmap_.MergeFrom(from.intmap_);
  stringmap_.MergeFrom(from.stringmap_);
  floatmap_.MergeFrom(from.floatmap_);
  boolmap_.MergeFrom(from.boolmap_);
}

void ConfigMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.ConfigMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMap::CopyFrom(const ConfigMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.ConfigMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMap::IsInitialized() const {

  return true;
}

void ConfigMap::Swap(ConfigMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigMap::InternalSwap(ConfigMap* other) {
  intmap_.Swap(&other->intmap_);
  stringmap_.Swap(&other->stringmap_);
  floatmap_.Swap(&other->floatmap_);
  boolmap_.Swap(&other->boolmap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigMap_descriptor_;
  metadata.reflection = ConfigMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigMap

// map<string, int64> IntMap = 1;
int ConfigMap::intmap_size() const {
  return intmap_.size();
}
void ConfigMap::clear_intmap() {
  intmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
ConfigMap::intmap() const {
  // @@protoc_insertion_point(field_map:rpc.ConfigMap.IntMap)
  return intmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
ConfigMap::mutable_intmap() {
  // @@protoc_insertion_point(field_mutable_map:rpc.ConfigMap.IntMap)
  return intmap_.MutableMap();
}

// map<string, string> StringMap = 2;
int ConfigMap::stringmap_size() const {
  return stringmap_.size();
}
void ConfigMap::clear_stringmap() {
  stringmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ConfigMap::stringmap() const {
  // @@protoc_insertion_point(field_map:rpc.ConfigMap.StringMap)
  return stringmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ConfigMap::mutable_stringmap() {
  // @@protoc_insertion_point(field_mutable_map:rpc.ConfigMap.StringMap)
  return stringmap_.MutableMap();
}

// map<string, double> FloatMap = 3;
int ConfigMap::floatmap_size() const {
  return floatmap_.size();
}
void ConfigMap::clear_floatmap() {
  floatmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, double >&
ConfigMap::floatmap() const {
  // @@protoc_insertion_point(field_map:rpc.ConfigMap.FloatMap)
  return floatmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, double >*
ConfigMap::mutable_floatmap() {
  // @@protoc_insertion_point(field_mutable_map:rpc.ConfigMap.FloatMap)
  return floatmap_.MutableMap();
}

// map<string, bool> BoolMap = 4;
int ConfigMap::boolmap_size() const {
  return boolmap_.size();
}
void ConfigMap::clear_boolmap() {
  boolmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, bool >&
ConfigMap::boolmap() const {
  // @@protoc_insertion_point(field_map:rpc.ConfigMap.BoolMap)
  return boolmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, bool >*
ConfigMap::mutable_boolmap() {
  // @@protoc_insertion_point(field_mutable_map:rpc.ConfigMap.BoolMap)
  return boolmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KillArg::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KillArg::KillArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.KillArg)
}

void KillArg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KillArg::KillArg(const KillArg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.KillArg)
}

void KillArg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KillArg::~KillArg() {
  // @@protoc_insertion_point(destructor:rpc.KillArg)
  SharedDtor();
}

void KillArg::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KillArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillArg_descriptor_;
}

const KillArg& KillArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

KillArg* KillArg::default_instance_ = NULL;

KillArg* KillArg::New(::google::protobuf::Arena* arena) const {
  KillArg* n = new KillArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KillArg::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.KillArg)
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KillArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.KillArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.KillArg.Reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.KillArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.KillArg)
  return false;
#undef DO_
}

void KillArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.KillArg)
  // optional string Reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.KillArg.Reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.KillArg)
}

::google::protobuf::uint8* KillArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.KillArg)
  // optional string Reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.KillArg.Reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.KillArg)
  return target;
}

int KillArg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.KillArg)
  int total_size = 0;

  // optional string Reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.KillArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KillArg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KillArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.KillArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.KillArg)
    MergeFrom(*source);
  }
}

void KillArg::MergeFrom(const KillArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.KillArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void KillArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.KillArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillArg::CopyFrom(const KillArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.KillArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillArg::IsInitialized() const {

  return true;
}

void KillArg::Swap(KillArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KillArg::InternalSwap(KillArg* other) {
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KillArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillArg_descriptor_;
  metadata.reflection = KillArg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KillArg

// optional string Reason = 1;
void KillArg::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KillArg::reason() const {
  // @@protoc_insertion_point(field_get:rpc.KillArg.Reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KillArg::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.KillArg.Reason)
}
 void KillArg::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.KillArg.Reason)
}
 void KillArg::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.KillArg.Reason)
}
 ::std::string* KillArg::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:rpc.KillArg.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KillArg::release_reason() {
  // @@protoc_insertion_point(field_release:rpc.KillArg.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KillArg::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:rpc.KillArg.Reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConfigPolicyReply::kErrorFieldNumber;
const int GetConfigPolicyReply::kBoolPolicyFieldNumber;
const int GetConfigPolicyReply::kFloatPolicyFieldNumber;
const int GetConfigPolicyReply::kIntegerPolicyFieldNumber;
const int GetConfigPolicyReply::kStringPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConfigPolicyReply::GetConfigPolicyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.GetConfigPolicyReply)
}

void GetConfigPolicyReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetConfigPolicyReply::GetConfigPolicyReply(const GetConfigPolicyReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.GetConfigPolicyReply)
}

void GetConfigPolicyReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bool_policy_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  bool_policy_.SetEntryDescriptor(
      &::rpc::GetConfigPolicyReply_BoolPolicyEntry_descriptor_);
  float_policy_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  float_policy_.SetEntryDescriptor(
      &::rpc::GetConfigPolicyReply_FloatPolicyEntry_descriptor_);
  integer_policy_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  integer_policy_.SetEntryDescriptor(
      &::rpc::GetConfigPolicyReply_IntegerPolicyEntry_descriptor_);
  string_policy_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  string_policy_.SetEntryDescriptor(
      &::rpc::GetConfigPolicyReply_StringPolicyEntry_descriptor_);
}

GetConfigPolicyReply::~GetConfigPolicyReply() {
  // @@protoc_insertion_point(destructor:rpc.GetConfigPolicyReply)
  SharedDtor();
}

void GetConfigPolicyReply::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetConfigPolicyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfigPolicyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfigPolicyReply_descriptor_;
}

const GetConfigPolicyReply& GetConfigPolicyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

GetConfigPolicyReply* GetConfigPolicyReply::default_instance_ = NULL;

GetConfigPolicyReply* GetConfigPolicyReply::New(::google::protobuf::Arena* arena) const {
  GetConfigPolicyReply* n = new GetConfigPolicyReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConfigPolicyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.GetConfigPolicyReply)
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bool_policy_.Clear();
  float_policy_.Clear();
  integer_policy_.Clear();
  string_policy_.Clear();
}

bool GetConfigPolicyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.GetConfigPolicyReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.GetConfigPolicyReply.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bool_policy;
        break;
      }

      // map<string, .rpc.BoolPolicy> bool_policy = 2;
      case 2: {
        if (tag == 18) {
         parse_bool_policy:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bool_policy:
          GetConfigPolicyReply_BoolPolicyEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::rpc::BoolPolicy,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy > > parser(&bool_policy_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.GetConfigPolicyReply.BoolPolicyEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_bool_policy;
        if (input->ExpectTag(26)) goto parse_loop_float_policy;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .rpc.FloatPolicy> float_policy = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_float_policy:
          GetConfigPolicyReply_FloatPolicyEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::rpc::FloatPolicy,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy > > parser(&float_policy_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.GetConfigPolicyReply.FloatPolicyEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_float_policy;
        if (input->ExpectTag(34)) goto parse_loop_integer_policy;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .rpc.IntegerPolicy> integer_policy = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_integer_policy:
          GetConfigPolicyReply_IntegerPolicyEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::rpc::IntegerPolicy,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy > > parser(&integer_policy_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.GetConfigPolicyReply.IntegerPolicyEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_integer_policy;
        if (input->ExpectTag(42)) goto parse_loop_string_policy;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .rpc.StringPolicy> string_policy = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_string_policy:
          GetConfigPolicyReply_StringPolicyEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::rpc::StringPolicy,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy > > parser(&string_policy_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.GetConfigPolicyReply.StringPolicyEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_string_policy;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.GetConfigPolicyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.GetConfigPolicyReply)
  return false;
#undef DO_
}

void GetConfigPolicyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.GetConfigPolicyReply)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.GetConfigPolicyReply.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // map<string, .rpc.BoolPolicy> bool_policy = 2;
  if (!this->bool_policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.GetConfigPolicyReply.BoolPolicyEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->bool_policy().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->bool_policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::const_iterator
          it = this->bool_policy().begin();
          it != this->bool_policy().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_BoolPolicyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bool_policy_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_BoolPolicyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::const_iterator
          it = this->bool_policy().begin();
          it != this->bool_policy().end(); ++it) {
        entry.reset(bool_policy_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .rpc.FloatPolicy> float_policy = 3;
  if (!this->float_policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.GetConfigPolicyReply.FloatPolicyEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->float_policy().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->float_policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::const_iterator
          it = this->float_policy().begin();
          it != this->float_policy().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_FloatPolicyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(float_policy_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_FloatPolicyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::const_iterator
          it = this->float_policy().begin();
          it != this->float_policy().end(); ++it) {
        entry.reset(float_policy_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .rpc.IntegerPolicy> integer_policy = 4;
  if (!this->integer_policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.GetConfigPolicyReply.IntegerPolicyEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->integer_policy().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->integer_policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::const_iterator
          it = this->integer_policy().begin();
          it != this->integer_policy().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_IntegerPolicyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(integer_policy_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_IntegerPolicyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::const_iterator
          it = this->integer_policy().begin();
          it != this->integer_policy().end(); ++it) {
        entry.reset(integer_policy_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .rpc.StringPolicy> string_policy = 5;
  if (!this->string_policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.GetConfigPolicyReply.StringPolicyEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->string_policy().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::const_iterator
          it = this->string_policy().begin();
          it != this->string_policy().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_StringPolicyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_policy_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_StringPolicyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::const_iterator
          it = this->string_policy().begin();
          it != this->string_policy().end(); ++it) {
        entry.reset(string_policy_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:rpc.GetConfigPolicyReply)
}

::google::protobuf::uint8* GetConfigPolicyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.GetConfigPolicyReply)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.GetConfigPolicyReply.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // map<string, .rpc.BoolPolicy> bool_policy = 2;
  if (!this->bool_policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.GetConfigPolicyReply.BoolPolicyEntry.key");
      }
    };

    if (deterministic &&
        this->bool_policy().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->bool_policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::const_iterator
          it = this->bool_policy().begin();
          it != this->bool_policy().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_BoolPolicyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bool_policy_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_BoolPolicyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::const_iterator
          it = this->bool_policy().begin();
          it != this->bool_policy().end(); ++it) {
        entry.reset(bool_policy_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .rpc.FloatPolicy> float_policy = 3;
  if (!this->float_policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.GetConfigPolicyReply.FloatPolicyEntry.key");
      }
    };

    if (deterministic &&
        this->float_policy().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->float_policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::const_iterator
          it = this->float_policy().begin();
          it != this->float_policy().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_FloatPolicyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(float_policy_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_FloatPolicyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::const_iterator
          it = this->float_policy().begin();
          it != this->float_policy().end(); ++it) {
        entry.reset(float_policy_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .rpc.IntegerPolicy> integer_policy = 4;
  if (!this->integer_policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.GetConfigPolicyReply.IntegerPolicyEntry.key");
      }
    };

    if (deterministic &&
        this->integer_policy().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->integer_policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::const_iterator
          it = this->integer_policy().begin();
          it != this->integer_policy().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_IntegerPolicyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(integer_policy_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_IntegerPolicyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::const_iterator
          it = this->integer_policy().begin();
          it != this->integer_policy().end(); ++it) {
        entry.reset(integer_policy_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .rpc.StringPolicy> string_policy = 5;
  if (!this->string_policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.GetConfigPolicyReply.StringPolicyEntry.key");
      }
    };

    if (deterministic &&
        this->string_policy().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::const_iterator
          it = this->string_policy().begin();
          it != this->string_policy().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_StringPolicyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_policy_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetConfigPolicyReply_StringPolicyEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::const_iterator
          it = this->string_policy().begin();
          it != this->string_policy().end(); ++it) {
        entry.reset(string_policy_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.GetConfigPolicyReply)
  return target;
}

int GetConfigPolicyReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.GetConfigPolicyReply)
  int total_size = 0;

  // optional string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // map<string, .rpc.BoolPolicy> bool_policy = 2;
  total_size += 1 * this->bool_policy_size();
  {
    ::google::protobuf::scoped_ptr<GetConfigPolicyReply_BoolPolicyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >::const_iterator
        it = this->bool_policy().begin();
        it != this->bool_policy().end(); ++it) {
      entry.reset(bool_policy_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .rpc.FloatPolicy> float_policy = 3;
  total_size += 1 * this->float_policy_size();
  {
    ::google::protobuf::scoped_ptr<GetConfigPolicyReply_FloatPolicyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >::const_iterator
        it = this->float_policy().begin();
        it != this->float_policy().end(); ++it) {
      entry.reset(float_policy_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .rpc.IntegerPolicy> integer_policy = 4;
  total_size += 1 * this->integer_policy_size();
  {
    ::google::protobuf::scoped_ptr<GetConfigPolicyReply_IntegerPolicyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >::const_iterator
        it = this->integer_policy().begin();
        it != this->integer_policy().end(); ++it) {
      entry.reset(integer_policy_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .rpc.StringPolicy> string_policy = 5;
  total_size += 1 * this->string_policy_size();
  {
    ::google::protobuf::scoped_ptr<GetConfigPolicyReply_StringPolicyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >::const_iterator
        it = this->string_policy().begin();
        it != this->string_policy().end(); ++it) {
      entry.reset(string_policy_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigPolicyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.GetConfigPolicyReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetConfigPolicyReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConfigPolicyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.GetConfigPolicyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.GetConfigPolicyReply)
    MergeFrom(*source);
  }
}

void GetConfigPolicyReply::MergeFrom(const GetConfigPolicyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.GetConfigPolicyReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bool_policy_.MergeFrom(from.bool_policy_);
  float_policy_.MergeFrom(from.float_policy_);
  integer_policy_.MergeFrom(from.integer_policy_);
  string_policy_.MergeFrom(from.string_policy_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void GetConfigPolicyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.GetConfigPolicyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigPolicyReply::CopyFrom(const GetConfigPolicyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.GetConfigPolicyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigPolicyReply::IsInitialized() const {

  return true;
}

void GetConfigPolicyReply::Swap(GetConfigPolicyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConfigPolicyReply::InternalSwap(GetConfigPolicyReply* other) {
  error_.Swap(&other->error_);
  bool_policy_.Swap(&other->bool_policy_);
  float_policy_.Swap(&other->float_policy_);
  integer_policy_.Swap(&other->integer_policy_);
  string_policy_.Swap(&other->string_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConfigPolicyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfigPolicyReply_descriptor_;
  metadata.reflection = GetConfigPolicyReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConfigPolicyReply

// optional string error = 1;
void GetConfigPolicyReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetConfigPolicyReply::error() const {
  // @@protoc_insertion_point(field_get:rpc.GetConfigPolicyReply.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetConfigPolicyReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.GetConfigPolicyReply.error)
}
 void GetConfigPolicyReply::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.GetConfigPolicyReply.error)
}
 void GetConfigPolicyReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.GetConfigPolicyReply.error)
}
 ::std::string* GetConfigPolicyReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:rpc.GetConfigPolicyReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetConfigPolicyReply::release_error() {
  // @@protoc_insertion_point(field_release:rpc.GetConfigPolicyReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetConfigPolicyReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpc.GetConfigPolicyReply.error)
}

// map<string, .rpc.BoolPolicy> bool_policy = 2;
int GetConfigPolicyReply::bool_policy_size() const {
  return bool_policy_.size();
}
void GetConfigPolicyReply::clear_bool_policy() {
  bool_policy_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >&
GetConfigPolicyReply::bool_policy() const {
  // @@protoc_insertion_point(field_map:rpc.GetConfigPolicyReply.bool_policy)
  return bool_policy_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::rpc::BoolPolicy >*
GetConfigPolicyReply::mutable_bool_policy() {
  // @@protoc_insertion_point(field_mutable_map:rpc.GetConfigPolicyReply.bool_policy)
  return bool_policy_.MutableMap();
}

// map<string, .rpc.FloatPolicy> float_policy = 3;
int GetConfigPolicyReply::float_policy_size() const {
  return float_policy_.size();
}
void GetConfigPolicyReply::clear_float_policy() {
  float_policy_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >&
GetConfigPolicyReply::float_policy() const {
  // @@protoc_insertion_point(field_map:rpc.GetConfigPolicyReply.float_policy)
  return float_policy_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::rpc::FloatPolicy >*
GetConfigPolicyReply::mutable_float_policy() {
  // @@protoc_insertion_point(field_mutable_map:rpc.GetConfigPolicyReply.float_policy)
  return float_policy_.MutableMap();
}

// map<string, .rpc.IntegerPolicy> integer_policy = 4;
int GetConfigPolicyReply::integer_policy_size() const {
  return integer_policy_.size();
}
void GetConfigPolicyReply::clear_integer_policy() {
  integer_policy_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >&
GetConfigPolicyReply::integer_policy() const {
  // @@protoc_insertion_point(field_map:rpc.GetConfigPolicyReply.integer_policy)
  return integer_policy_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::rpc::IntegerPolicy >*
GetConfigPolicyReply::mutable_integer_policy() {
  // @@protoc_insertion_point(field_mutable_map:rpc.GetConfigPolicyReply.integer_policy)
  return integer_policy_.MutableMap();
}

// map<string, .rpc.StringPolicy> string_policy = 5;
int GetConfigPolicyReply::string_policy_size() const {
  return string_policy_.size();
}
void GetConfigPolicyReply::clear_string_policy() {
  string_policy_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >&
GetConfigPolicyReply::string_policy() const {
  // @@protoc_insertion_point(field_map:rpc.GetConfigPolicyReply.string_policy)
  return string_policy_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::rpc::StringPolicy >*
GetConfigPolicyReply::mutable_string_policy() {
  // @@protoc_insertion_point(field_mutable_map:rpc.GetConfigPolicyReply.string_policy)
  return string_policy_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolRule::kRequiredFieldNumber;
const int BoolRule::kDefaultFieldNumber;
const int BoolRule::kHasDefaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolRule::BoolRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.BoolRule)
}

void BoolRule::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BoolRule::BoolRule(const BoolRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.BoolRule)
}

void BoolRule::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  required_ = false;
  default__ = false;
  has_default_ = false;
}

BoolRule::~BoolRule() {
  // @@protoc_insertion_point(destructor:rpc.BoolRule)
  SharedDtor();
}

void BoolRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoolRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoolRule_descriptor_;
}

const BoolRule& BoolRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

BoolRule* BoolRule::default_instance_ = NULL;

BoolRule* BoolRule::New(::google::protobuf::Arena* arena) const {
  BoolRule* n = new BoolRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoolRule::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.BoolRule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BoolRule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BoolRule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(required_, has_default_);

#undef ZR_HELPER_
#undef ZR_

}

bool BoolRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.BoolRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool required = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_default;
        break;
      }

      // optional bool default = 2;
      case 2: {
        if (tag == 16) {
         parse_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_default;
        break;
      }

      // optional bool has_default = 3;
      case 3: {
        if (tag == 24) {
         parse_has_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_default_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.BoolRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.BoolRule)
  return false;
#undef DO_
}

void BoolRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.BoolRule)
  // optional bool required = 1;
  if (this->required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required(), output);
  }

  // optional bool default = 2;
  if (this->default_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->default_(), output);
  }

  // optional bool has_default = 3;
  if (this->has_default() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_default(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.BoolRule)
}

::google::protobuf::uint8* BoolRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.BoolRule)
  // optional bool required = 1;
  if (this->required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required(), target);
  }

  // optional bool default = 2;
  if (this->default_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->default_(), target);
  }

  // optional bool has_default = 3;
  if (this->has_default() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_default(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.BoolRule)
  return target;
}

int BoolRule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.BoolRule)
  int total_size = 0;

  // optional bool required = 1;
  if (this->required() != 0) {
    total_size += 1 + 1;
  }

  // optional bool default = 2;
  if (this->default_() != 0) {
    total_size += 1 + 1;
  }

  // optional bool has_default = 3;
  if (this->has_default() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.BoolRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoolRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoolRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.BoolRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.BoolRule)
    MergeFrom(*source);
  }
}

void BoolRule::MergeFrom(const BoolRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.BoolRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.required() != 0) {
    set_required(from.required());
  }
  if (from.default_() != 0) {
    set_default_(from.default_());
  }
  if (from.has_default() != 0) {
    set_has_default(from.has_default());
  }
}

void BoolRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.BoolRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolRule::CopyFrom(const BoolRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.BoolRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolRule::IsInitialized() const {

  return true;
}

void BoolRule::Swap(BoolRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolRule::InternalSwap(BoolRule* other) {
  std::swap(required_, other->required_);
  std::swap(default__, other->default__);
  std::swap(has_default_, other->has_default_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoolRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoolRule_descriptor_;
  metadata.reflection = BoolRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoolRule

// optional bool required = 1;
void BoolRule::clear_required() {
  required_ = false;
}
 bool BoolRule::required() const {
  // @@protoc_insertion_point(field_get:rpc.BoolRule.required)
  return required_;
}
 void BoolRule::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:rpc.BoolRule.required)
}

// optional bool default = 2;
void BoolRule::clear_default_() {
  default__ = false;
}
 bool BoolRule::default_() const {
  // @@protoc_insertion_point(field_get:rpc.BoolRule.default)
  return default__;
}
 void BoolRule::set_default_(bool value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:rpc.BoolRule.default)
}

// optional bool has_default = 3;
void BoolRule::clear_has_default() {
  has_default_ = false;
}
 bool BoolRule::has_default() const {
  // @@protoc_insertion_point(field_get:rpc.BoolRule.has_default)
  return has_default_;
}
 void BoolRule::set_has_default(bool value) {
  
  has_default_ = value;
  // @@protoc_insertion_point(field_set:rpc.BoolRule.has_default)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolPolicy::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolPolicy::BoolPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.BoolPolicy)
}

void BoolPolicy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BoolPolicy::BoolPolicy(const BoolPolicy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.BoolPolicy)
}

void BoolPolicy::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rules_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  rules_.SetEntryDescriptor(
      &::rpc::BoolPolicy_RulesEntry_descriptor_);
}

BoolPolicy::~BoolPolicy() {
  // @@protoc_insertion_point(destructor:rpc.BoolPolicy)
  SharedDtor();
}

void BoolPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoolPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoolPolicy_descriptor_;
}

const BoolPolicy& BoolPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

BoolPolicy* BoolPolicy::default_instance_ = NULL;

BoolPolicy* BoolPolicy::New(::google::protobuf::Arena* arena) const {
  BoolPolicy* n = new BoolPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoolPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.BoolPolicy)
  rules_.Clear();
}

bool BoolPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.BoolPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .rpc.BoolRule> rules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          BoolPolicy_RulesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::rpc::BoolRule,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpc::BoolRule > > parser(&rules_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.BoolPolicy.RulesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.BoolPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.BoolPolicy)
  return false;
#undef DO_
}

void BoolPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.BoolPolicy)
  // map<string, .rpc.BoolRule> rules = 1;
  if (!this->rules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.BoolPolicy.RulesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->rules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<BoolPolicy_RulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<BoolPolicy_RulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it) {
        entry.reset(rules_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:rpc.BoolPolicy)
}

::google::protobuf::uint8* BoolPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.BoolPolicy)
  // map<string, .rpc.BoolRule> rules = 1;
  if (!this->rules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.BoolPolicy.RulesEntry.key");
      }
    };

    if (deterministic &&
        this->rules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<BoolPolicy_RulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<BoolPolicy_RulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it) {
        entry.reset(rules_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.BoolPolicy)
  return target;
}

int BoolPolicy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.BoolPolicy)
  int total_size = 0;

  // map<string, .rpc.BoolRule> rules = 1;
  total_size += 1 * this->rules_size();
  {
    ::google::protobuf::scoped_ptr<BoolPolicy_RulesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::rpc::BoolRule >::const_iterator
        it = this->rules().begin();
        it != this->rules().end(); ++it) {
      entry.reset(rules_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.BoolPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoolPolicy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoolPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.BoolPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.BoolPolicy)
    MergeFrom(*source);
  }
}

void BoolPolicy::MergeFrom(const BoolPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.BoolPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rules_.MergeFrom(from.rules_);
}

void BoolPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.BoolPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolPolicy::CopyFrom(const BoolPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.BoolPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolPolicy::IsInitialized() const {

  return true;
}

void BoolPolicy::Swap(BoolPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolPolicy::InternalSwap(BoolPolicy* other) {
  rules_.Swap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoolPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoolPolicy_descriptor_;
  metadata.reflection = BoolPolicy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoolPolicy

// map<string, .rpc.BoolRule> rules = 1;
int BoolPolicy::rules_size() const {
  return rules_.size();
}
void BoolPolicy::clear_rules() {
  rules_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >&
BoolPolicy::rules() const {
  // @@protoc_insertion_point(field_map:rpc.BoolPolicy.rules)
  return rules_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::rpc::BoolRule >*
BoolPolicy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_map:rpc.BoolPolicy.rules)
  return rules_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatRule::kRequiredFieldNumber;
const int FloatRule::kMinimumFieldNumber;
const int FloatRule::kMaximumFieldNumber;
const int FloatRule::kDefaultFieldNumber;
const int FloatRule::kHasDefaultFieldNumber;
const int FloatRule::kHasMinFieldNumber;
const int FloatRule::kHasMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatRule::FloatRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.FloatRule)
}

void FloatRule::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FloatRule::FloatRule(const FloatRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.FloatRule)
}

void FloatRule::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  required_ = false;
  minimum_ = 0;
  maximum_ = 0;
  default__ = 0;
  has_default_ = false;
  has_min_ = false;
  has_max_ = false;
}

FloatRule::~FloatRule() {
  // @@protoc_insertion_point(destructor:rpc.FloatRule)
  SharedDtor();
}

void FloatRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatRule_descriptor_;
}

const FloatRule& FloatRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

FloatRule* FloatRule::default_instance_ = NULL;

FloatRule* FloatRule::New(::google::protobuf::Arena* arena) const {
  FloatRule* n = new FloatRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatRule::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.FloatRule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FloatRule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FloatRule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(minimum_, has_max_);

#undef ZR_HELPER_
#undef ZR_

}

bool FloatRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.FloatRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool required = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_minimum;
        break;
      }

      // optional double minimum = 2;
      case 2: {
        if (tag == 17) {
         parse_minimum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_maximum;
        break;
      }

      // optional double maximum = 3;
      case 3: {
        if (tag == 25) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_default;
        break;
      }

      // optional double default = 4;
      case 4: {
        if (tag == 33) {
         parse_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_has_default;
        break;
      }

      // optional bool has_default = 5;
      case 5: {
        if (tag == 40) {
         parse_has_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_default_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_has_min;
        break;
      }

      // optional bool has_min = 6;
      case 6: {
        if (tag == 48) {
         parse_has_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_has_max;
        break;
      }

      // optional bool has_max = 7;
      case 7: {
        if (tag == 56) {
         parse_has_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.FloatRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.FloatRule)
  return false;
#undef DO_
}

void FloatRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.FloatRule)
  // optional bool required = 1;
  if (this->required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required(), output);
  }

  // optional double minimum = 2;
  if (this->minimum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->minimum(), output);
  }

  // optional double maximum = 3;
  if (this->maximum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->maximum(), output);
  }

  // optional double default = 4;
  if (this->default_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->default_(), output);
  }

  // optional bool has_default = 5;
  if (this->has_default() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_default(), output);
  }

  // optional bool has_min = 6;
  if (this->has_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_min(), output);
  }

  // optional bool has_max = 7;
  if (this->has_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_max(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.FloatRule)
}

::google::protobuf::uint8* FloatRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.FloatRule)
  // optional bool required = 1;
  if (this->required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required(), target);
  }

  // optional double minimum = 2;
  if (this->minimum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->minimum(), target);
  }

  // optional double maximum = 3;
  if (this->maximum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->maximum(), target);
  }

  // optional double default = 4;
  if (this->default_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->default_(), target);
  }

  // optional bool has_default = 5;
  if (this->has_default() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_default(), target);
  }

  // optional bool has_min = 6;
  if (this->has_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_min(), target);
  }

  // optional bool has_max = 7;
  if (this->has_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.FloatRule)
  return target;
}

int FloatRule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.FloatRule)
  int total_size = 0;

  // optional bool required = 1;
  if (this->required() != 0) {
    total_size += 1 + 1;
  }

  // optional double minimum = 2;
  if (this->minimum() != 0) {
    total_size += 1 + 8;
  }

  // optional double maximum = 3;
  if (this->maximum() != 0) {
    total_size += 1 + 8;
  }

  // optional double default = 4;
  if (this->default_() != 0) {
    total_size += 1 + 8;
  }

  // optional bool has_default = 5;
  if (this->has_default() != 0) {
    total_size += 1 + 1;
  }

  // optional bool has_min = 6;
  if (this->has_min() != 0) {
    total_size += 1 + 1;
  }

  // optional bool has_max = 7;
  if (this->has_max() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.FloatRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FloatRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.FloatRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.FloatRule)
    MergeFrom(*source);
  }
}

void FloatRule::MergeFrom(const FloatRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.FloatRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.required() != 0) {
    set_required(from.required());
  }
  if (from.minimum() != 0) {
    set_minimum(from.minimum());
  }
  if (from.maximum() != 0) {
    set_maximum(from.maximum());
  }
  if (from.default_() != 0) {
    set_default_(from.default_());
  }
  if (from.has_default() != 0) {
    set_has_default(from.has_default());
  }
  if (from.has_min() != 0) {
    set_has_min(from.has_min());
  }
  if (from.has_max() != 0) {
    set_has_max(from.has_max());
  }
}

void FloatRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.FloatRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatRule::CopyFrom(const FloatRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.FloatRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatRule::IsInitialized() const {

  return true;
}

void FloatRule::Swap(FloatRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatRule::InternalSwap(FloatRule* other) {
  std::swap(required_, other->required_);
  std::swap(minimum_, other->minimum_);
  std::swap(maximum_, other->maximum_);
  std::swap(default__, other->default__);
  std::swap(has_default_, other->has_default_);
  std::swap(has_min_, other->has_min_);
  std::swap(has_max_, other->has_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatRule_descriptor_;
  metadata.reflection = FloatRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatRule

// optional bool required = 1;
void FloatRule::clear_required() {
  required_ = false;
}
 bool FloatRule::required() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.required)
  return required_;
}
 void FloatRule::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.required)
}

// optional double minimum = 2;
void FloatRule::clear_minimum() {
  minimum_ = 0;
}
 double FloatRule::minimum() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.minimum)
  return minimum_;
}
 void FloatRule::set_minimum(double value) {
  
  minimum_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.minimum)
}

// optional double maximum = 3;
void FloatRule::clear_maximum() {
  maximum_ = 0;
}
 double FloatRule::maximum() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.maximum)
  return maximum_;
}
 void FloatRule::set_maximum(double value) {
  
  maximum_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.maximum)
}

// optional double default = 4;
void FloatRule::clear_default_() {
  default__ = 0;
}
 double FloatRule::default_() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.default)
  return default__;
}
 void FloatRule::set_default_(double value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.default)
}

// optional bool has_default = 5;
void FloatRule::clear_has_default() {
  has_default_ = false;
}
 bool FloatRule::has_default() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.has_default)
  return has_default_;
}
 void FloatRule::set_has_default(bool value) {
  
  has_default_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.has_default)
}

// optional bool has_min = 6;
void FloatRule::clear_has_min() {
  has_min_ = false;
}
 bool FloatRule::has_min() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.has_min)
  return has_min_;
}
 void FloatRule::set_has_min(bool value) {
  
  has_min_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.has_min)
}

// optional bool has_max = 7;
void FloatRule::clear_has_max() {
  has_max_ = false;
}
 bool FloatRule::has_max() const {
  // @@protoc_insertion_point(field_get:rpc.FloatRule.has_max)
  return has_max_;
}
 void FloatRule::set_has_max(bool value) {
  
  has_max_ = value;
  // @@protoc_insertion_point(field_set:rpc.FloatRule.has_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatPolicy::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatPolicy::FloatPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.FloatPolicy)
}

void FloatPolicy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FloatPolicy::FloatPolicy(const FloatPolicy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.FloatPolicy)
}

void FloatPolicy::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rules_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  rules_.SetEntryDescriptor(
      &::rpc::FloatPolicy_RulesEntry_descriptor_);
}

FloatPolicy::~FloatPolicy() {
  // @@protoc_insertion_point(destructor:rpc.FloatPolicy)
  SharedDtor();
}

void FloatPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatPolicy_descriptor_;
}

const FloatPolicy& FloatPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

FloatPolicy* FloatPolicy::default_instance_ = NULL;

FloatPolicy* FloatPolicy::New(::google::protobuf::Arena* arena) const {
  FloatPolicy* n = new FloatPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.FloatPolicy)
  rules_.Clear();
}

bool FloatPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.FloatPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .rpc.FloatRule> rules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          FloatPolicy_RulesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::rpc::FloatRule,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpc::FloatRule > > parser(&rules_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.FloatPolicy.RulesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.FloatPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.FloatPolicy)
  return false;
#undef DO_
}

void FloatPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.FloatPolicy)
  // map<string, .rpc.FloatRule> rules = 1;
  if (!this->rules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.FloatPolicy.RulesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->rules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FloatPolicy_RulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FloatPolicy_RulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it) {
        entry.reset(rules_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:rpc.FloatPolicy)
}

::google::protobuf::uint8* FloatPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.FloatPolicy)
  // map<string, .rpc.FloatRule> rules = 1;
  if (!this->rules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.FloatPolicy.RulesEntry.key");
      }
    };

    if (deterministic &&
        this->rules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FloatPolicy_RulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FloatPolicy_RulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it) {
        entry.reset(rules_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.FloatPolicy)
  return target;
}

int FloatPolicy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.FloatPolicy)
  int total_size = 0;

  // map<string, .rpc.FloatRule> rules = 1;
  total_size += 1 * this->rules_size();
  {
    ::google::protobuf::scoped_ptr<FloatPolicy_RulesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::rpc::FloatRule >::const_iterator
        it = this->rules().begin();
        it != this->rules().end(); ++it) {
      entry.reset(rules_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.FloatPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FloatPolicy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.FloatPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.FloatPolicy)
    MergeFrom(*source);
  }
}

void FloatPolicy::MergeFrom(const FloatPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.FloatPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rules_.MergeFrom(from.rules_);
}

void FloatPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.FloatPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatPolicy::CopyFrom(const FloatPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.FloatPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatPolicy::IsInitialized() const {

  return true;
}

void FloatPolicy::Swap(FloatPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatPolicy::InternalSwap(FloatPolicy* other) {
  rules_.Swap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatPolicy_descriptor_;
  metadata.reflection = FloatPolicy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatPolicy

// map<string, .rpc.FloatRule> rules = 1;
int FloatPolicy::rules_size() const {
  return rules_.size();
}
void FloatPolicy::clear_rules() {
  rules_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >&
FloatPolicy::rules() const {
  // @@protoc_insertion_point(field_map:rpc.FloatPolicy.rules)
  return rules_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::rpc::FloatRule >*
FloatPolicy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_map:rpc.FloatPolicy.rules)
  return rules_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegerRule::kRequiredFieldNumber;
const int IntegerRule::kMinimumFieldNumber;
const int IntegerRule::kMaximumFieldNumber;
const int IntegerRule::kDefaultFieldNumber;
const int IntegerRule::kHasDefaultFieldNumber;
const int IntegerRule::kHasMinFieldNumber;
const int IntegerRule::kHasMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegerRule::IntegerRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.IntegerRule)
}

void IntegerRule::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IntegerRule::IntegerRule(const IntegerRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.IntegerRule)
}

void IntegerRule::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  required_ = false;
  minimum_ = GOOGLE_LONGLONG(0);
  maximum_ = GOOGLE_LONGLONG(0);
  default__ = GOOGLE_LONGLONG(0);
  has_default_ = false;
  has_min_ = false;
  has_max_ = false;
}

IntegerRule::~IntegerRule() {
  // @@protoc_insertion_point(destructor:rpc.IntegerRule)
  SharedDtor();
}

void IntegerRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegerRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegerRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegerRule_descriptor_;
}

const IntegerRule& IntegerRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

IntegerRule* IntegerRule::default_instance_ = NULL;

IntegerRule* IntegerRule::New(::google::protobuf::Arena* arena) const {
  IntegerRule* n = new IntegerRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntegerRule::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.IntegerRule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IntegerRule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IntegerRule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(minimum_, has_max_);

#undef ZR_HELPER_
#undef ZR_

}

bool IntegerRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.IntegerRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool required = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minimum;
        break;
      }

      // optional int64 minimum = 2;
      case 2: {
        if (tag == 16) {
         parse_minimum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minimum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maximum;
        break;
      }

      // optional int64 maximum = 3;
      case 3: {
        if (tag == 24) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maximum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_default;
        break;
      }

      // optional int64 default = 4;
      case 4: {
        if (tag == 32) {
         parse_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &default__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_has_default;
        break;
      }

      // optional bool has_default = 5;
      case 5: {
        if (tag == 40) {
         parse_has_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_default_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_has_min;
        break;
      }

      // optional bool has_min = 6;
      case 6: {
        if (tag == 48) {
         parse_has_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_has_max;
        break;
      }

      // optional bool has_max = 7;
      case 7: {
        if (tag == 56) {
         parse_has_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.IntegerRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.IntegerRule)
  return false;
#undef DO_
}

void IntegerRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.IntegerRule)
  // optional bool required = 1;
  if (this->required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required(), output);
  }

  // optional int64 minimum = 2;
  if (this->minimum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->minimum(), output);
  }

  // optional int64 maximum = 3;
  if (this->maximum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->maximum(), output);
  }

  // optional int64 default = 4;
  if (this->default_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->default_(), output);
  }

  // optional bool has_default = 5;
  if (this->has_default() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_default(), output);
  }

  // optional bool has_min = 6;
  if (this->has_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_min(), output);
  }

  // optional bool has_max = 7;
  if (this->has_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_max(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.IntegerRule)
}

::google::protobuf::uint8* IntegerRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.IntegerRule)
  // optional bool required = 1;
  if (this->required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required(), target);
  }

  // optional int64 minimum = 2;
  if (this->minimum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->minimum(), target);
  }

  // optional int64 maximum = 3;
  if (this->maximum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->maximum(), target);
  }

  // optional int64 default = 4;
  if (this->default_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->default_(), target);
  }

  // optional bool has_default = 5;
  if (this->has_default() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_default(), target);
  }

  // optional bool has_min = 6;
  if (this->has_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_min(), target);
  }

  // optional bool has_max = 7;
  if (this->has_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.IntegerRule)
  return target;
}

int IntegerRule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.IntegerRule)
  int total_size = 0;

  // optional bool required = 1;
  if (this->required() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 minimum = 2;
  if (this->minimum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->minimum());
  }

  // optional int64 maximum = 3;
  if (this->maximum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maximum());
  }

  // optional int64 default = 4;
  if (this->default_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->default_());
  }

  // optional bool has_default = 5;
  if (this->has_default() != 0) {
    total_size += 1 + 1;
  }

  // optional bool has_min = 6;
  if (this->has_min() != 0) {
    total_size += 1 + 1;
  }

  // optional bool has_max = 7;
  if (this->has_max() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegerRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.IntegerRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IntegerRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegerRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.IntegerRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.IntegerRule)
    MergeFrom(*source);
  }
}

void IntegerRule::MergeFrom(const IntegerRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.IntegerRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.required() != 0) {
    set_required(from.required());
  }
  if (from.minimum() != 0) {
    set_minimum(from.minimum());
  }
  if (from.maximum() != 0) {
    set_maximum(from.maximum());
  }
  if (from.default_() != 0) {
    set_default_(from.default_());
  }
  if (from.has_default() != 0) {
    set_has_default(from.has_default());
  }
  if (from.has_min() != 0) {
    set_has_min(from.has_min());
  }
  if (from.has_max() != 0) {
    set_has_max(from.has_max());
  }
}

void IntegerRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.IntegerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerRule::CopyFrom(const IntegerRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.IntegerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerRule::IsInitialized() const {

  return true;
}

void IntegerRule::Swap(IntegerRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegerRule::InternalSwap(IntegerRule* other) {
  std::swap(required_, other->required_);
  std::swap(minimum_, other->minimum_);
  std::swap(maximum_, other->maximum_);
  std::swap(default__, other->default__);
  std::swap(has_default_, other->has_default_);
  std::swap(has_min_, other->has_min_);
  std::swap(has_max_, other->has_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntegerRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegerRule_descriptor_;
  metadata.reflection = IntegerRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntegerRule

// optional bool required = 1;
void IntegerRule::clear_required() {
  required_ = false;
}
 bool IntegerRule::required() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.required)
  return required_;
}
 void IntegerRule::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.required)
}

// optional int64 minimum = 2;
void IntegerRule::clear_minimum() {
  minimum_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 IntegerRule::minimum() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.minimum)
  return minimum_;
}
 void IntegerRule::set_minimum(::google::protobuf::int64 value) {
  
  minimum_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.minimum)
}

// optional int64 maximum = 3;
void IntegerRule::clear_maximum() {
  maximum_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 IntegerRule::maximum() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.maximum)
  return maximum_;
}
 void IntegerRule::set_maximum(::google::protobuf::int64 value) {
  
  maximum_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.maximum)
}

// optional int64 default = 4;
void IntegerRule::clear_default_() {
  default__ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 IntegerRule::default_() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.default)
  return default__;
}
 void IntegerRule::set_default_(::google::protobuf::int64 value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.default)
}

// optional bool has_default = 5;
void IntegerRule::clear_has_default() {
  has_default_ = false;
}
 bool IntegerRule::has_default() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.has_default)
  return has_default_;
}
 void IntegerRule::set_has_default(bool value) {
  
  has_default_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.has_default)
}

// optional bool has_min = 6;
void IntegerRule::clear_has_min() {
  has_min_ = false;
}
 bool IntegerRule::has_min() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.has_min)
  return has_min_;
}
 void IntegerRule::set_has_min(bool value) {
  
  has_min_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.has_min)
}

// optional bool has_max = 7;
void IntegerRule::clear_has_max() {
  has_max_ = false;
}
 bool IntegerRule::has_max() const {
  // @@protoc_insertion_point(field_get:rpc.IntegerRule.has_max)
  return has_max_;
}
 void IntegerRule::set_has_max(bool value) {
  
  has_max_ = value;
  // @@protoc_insertion_point(field_set:rpc.IntegerRule.has_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegerPolicy::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegerPolicy::IntegerPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.IntegerPolicy)
}

void IntegerPolicy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IntegerPolicy::IntegerPolicy(const IntegerPolicy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.IntegerPolicy)
}

void IntegerPolicy::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rules_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  rules_.SetEntryDescriptor(
      &::rpc::IntegerPolicy_RulesEntry_descriptor_);
}

IntegerPolicy::~IntegerPolicy() {
  // @@protoc_insertion_point(destructor:rpc.IntegerPolicy)
  SharedDtor();
}

void IntegerPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegerPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegerPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegerPolicy_descriptor_;
}

const IntegerPolicy& IntegerPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

IntegerPolicy* IntegerPolicy::default_instance_ = NULL;

IntegerPolicy* IntegerPolicy::New(::google::protobuf::Arena* arena) const {
  IntegerPolicy* n = new IntegerPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntegerPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.IntegerPolicy)
  rules_.Clear();
}

bool IntegerPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.IntegerPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .rpc.IntegerRule> rules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          IntegerPolicy_RulesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::rpc::IntegerRule,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule > > parser(&rules_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.IntegerPolicy.RulesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.IntegerPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.IntegerPolicy)
  return false;
#undef DO_
}

void IntegerPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.IntegerPolicy)
  // map<string, .rpc.IntegerRule> rules = 1;
  if (!this->rules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.IntegerPolicy.RulesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->rules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<IntegerPolicy_RulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<IntegerPolicy_RulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it) {
        entry.reset(rules_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:rpc.IntegerPolicy)
}

::google::protobuf::uint8* IntegerPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.IntegerPolicy)
  // map<string, .rpc.IntegerRule> rules = 1;
  if (!this->rules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.IntegerPolicy.RulesEntry.key");
      }
    };

    if (deterministic &&
        this->rules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<IntegerPolicy_RulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<IntegerPolicy_RulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it) {
        entry.reset(rules_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.IntegerPolicy)
  return target;
}

int IntegerPolicy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.IntegerPolicy)
  int total_size = 0;

  // map<string, .rpc.IntegerRule> rules = 1;
  total_size += 1 * this->rules_size();
  {
    ::google::protobuf::scoped_ptr<IntegerPolicy_RulesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >::const_iterator
        it = this->rules().begin();
        it != this->rules().end(); ++it) {
      entry.reset(rules_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegerPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.IntegerPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IntegerPolicy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegerPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.IntegerPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.IntegerPolicy)
    MergeFrom(*source);
  }
}

void IntegerPolicy::MergeFrom(const IntegerPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.IntegerPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rules_.MergeFrom(from.rules_);
}

void IntegerPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.IntegerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerPolicy::CopyFrom(const IntegerPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.IntegerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerPolicy::IsInitialized() const {

  return true;
}

void IntegerPolicy::Swap(IntegerPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegerPolicy::InternalSwap(IntegerPolicy* other) {
  rules_.Swap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntegerPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegerPolicy_descriptor_;
  metadata.reflection = IntegerPolicy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntegerPolicy

// map<string, .rpc.IntegerRule> rules = 1;
int IntegerPolicy::rules_size() const {
  return rules_.size();
}
void IntegerPolicy::clear_rules() {
  rules_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >&
IntegerPolicy::rules() const {
  // @@protoc_insertion_point(field_map:rpc.IntegerPolicy.rules)
  return rules_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::rpc::IntegerRule >*
IntegerPolicy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_map:rpc.IntegerPolicy.rules)
  return rules_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringRule::kRequiredFieldNumber;
const int StringRule::kDefaultFieldNumber;
const int StringRule::kHasDefaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringRule::StringRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.StringRule)
}

void StringRule::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StringRule::StringRule(const StringRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.StringRule)
}

void StringRule::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  required_ = false;
  default__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  has_default_ = false;
}

StringRule::~StringRule() {
  // @@protoc_insertion_point(destructor:rpc.StringRule)
  SharedDtor();
}

void StringRule::SharedDtor() {
  default__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StringRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringRule_descriptor_;
}

const StringRule& StringRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

StringRule* StringRule::default_instance_ = NULL;

StringRule* StringRule::New(::google::protobuf::Arena* arena) const {
  StringRule* n = new StringRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringRule::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.StringRule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StringRule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StringRule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(required_, has_default_);
  default__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool StringRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.StringRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool required = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_default;
        break;
      }

      // optional string default = 2;
      case 2: {
        if (tag == 18) {
         parse_default:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->default_().data(), this->default_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.StringRule.default"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_default;
        break;
      }

      // optional bool has_default = 3;
      case 3: {
        if (tag == 24) {
         parse_has_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_default_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.StringRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.StringRule)
  return false;
#undef DO_
}

void StringRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.StringRule)
  // optional bool required = 1;
  if (this->required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required(), output);
  }

  // optional string default = 2;
  if (this->default_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_().data(), this->default_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.StringRule.default");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->default_(), output);
  }

  // optional bool has_default = 3;
  if (this->has_default() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_default(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.StringRule)
}

::google::protobuf::uint8* StringRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.StringRule)
  // optional bool required = 1;
  if (this->required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required(), target);
  }

  // optional string default = 2;
  if (this->default_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_().data(), this->default_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.StringRule.default");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->default_(), target);
  }

  // optional bool has_default = 3;
  if (this->has_default() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_default(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.StringRule)
  return target;
}

int StringRule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.StringRule)
  int total_size = 0;

  // optional bool required = 1;
  if (this->required() != 0) {
    total_size += 1 + 1;
  }

  // optional string default = 2;
  if (this->default_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_());
  }

  // optional bool has_default = 3;
  if (this->has_default() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.StringRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StringRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StringRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.StringRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.StringRule)
    MergeFrom(*source);
  }
}

void StringRule::MergeFrom(const StringRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.StringRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.required() != 0) {
    set_required(from.required());
  }
  if (from.default_().size() > 0) {

    default__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default__);
  }
  if (from.has_default() != 0) {
    set_has_default(from.has_default());
  }
}

void StringRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.StringRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringRule::CopyFrom(const StringRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.StringRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringRule::IsInitialized() const {

  return true;
}

void StringRule::Swap(StringRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringRule::InternalSwap(StringRule* other) {
  std::swap(required_, other->required_);
  default__.Swap(&other->default__);
  std::swap(has_default_, other->has_default_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringRule_descriptor_;
  metadata.reflection = StringRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringRule

// optional bool required = 1;
void StringRule::clear_required() {
  required_ = false;
}
 bool StringRule::required() const {
  // @@protoc_insertion_point(field_get:rpc.StringRule.required)
  return required_;
}
 void StringRule::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:rpc.StringRule.required)
}

// optional string default = 2;
void StringRule::clear_default_() {
  default__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StringRule::default_() const {
  // @@protoc_insertion_point(field_get:rpc.StringRule.default)
  return default__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringRule::set_default_(const ::std::string& value) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.StringRule.default)
}
 void StringRule::set_default_(const char* value) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.StringRule.default)
}
 void StringRule::set_default_(const char* value, size_t size) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.StringRule.default)
}
 ::std::string* StringRule::mutable_default_() {
  
  // @@protoc_insertion_point(field_mutable:rpc.StringRule.default)
  return default__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringRule::release_default_() {
  // @@protoc_insertion_point(field_release:rpc.StringRule.default)
  
  return default__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringRule::set_allocated_default_(::std::string* default_) {
  if (default_ != NULL) {
    
  } else {
    
  }
  default__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_);
  // @@protoc_insertion_point(field_set_allocated:rpc.StringRule.default)
}

// optional bool has_default = 3;
void StringRule::clear_has_default() {
  has_default_ = false;
}
 bool StringRule::has_default() const {
  // @@protoc_insertion_point(field_get:rpc.StringRule.has_default)
  return has_default_;
}
 void StringRule::set_has_default(bool value) {
  
  has_default_ = value;
  // @@protoc_insertion_point(field_set:rpc.StringRule.has_default)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringPolicy::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringPolicy::StringPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.StringPolicy)
}

void StringPolicy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StringPolicy::StringPolicy(const StringPolicy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.StringPolicy)
}

void StringPolicy::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rules_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  rules_.SetEntryDescriptor(
      &::rpc::StringPolicy_RulesEntry_descriptor_);
}

StringPolicy::~StringPolicy() {
  // @@protoc_insertion_point(destructor:rpc.StringPolicy)
  SharedDtor();
}

void StringPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringPolicy_descriptor_;
}

const StringPolicy& StringPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

StringPolicy* StringPolicy::default_instance_ = NULL;

StringPolicy* StringPolicy::New(::google::protobuf::Arena* arena) const {
  StringPolicy* n = new StringPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.StringPolicy)
  rules_.Clear();
}

bool StringPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.StringPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .rpc.StringRule> rules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          StringPolicy_RulesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::rpc::StringRule,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpc::StringRule > > parser(&rules_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.StringPolicy.RulesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.StringPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.StringPolicy)
  return false;
#undef DO_
}

void StringPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.StringPolicy)
  // map<string, .rpc.StringRule> rules = 1;
  if (!this->rules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::StringRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.StringPolicy.RulesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->rules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::StringRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::StringRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StringPolicy_RulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StringPolicy_RulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::StringRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it) {
        entry.reset(rules_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:rpc.StringPolicy)
}

::google::protobuf::uint8* StringPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.StringPolicy)
  // map<string, .rpc.StringRule> rules = 1;
  if (!this->rules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpc::StringRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rpc.StringPolicy.RulesEntry.key");
      }
    };

    if (deterministic &&
        this->rules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpc::StringRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpc::StringRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StringPolicy_RulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StringPolicy_RulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::rpc::StringRule >::const_iterator
          it = this->rules().begin();
          it != this->rules().end(); ++it) {
        entry.reset(rules_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.StringPolicy)
  return target;
}

int StringPolicy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.StringPolicy)
  int total_size = 0;

  // map<string, .rpc.StringRule> rules = 1;
  total_size += 1 * this->rules_size();
  {
    ::google::protobuf::scoped_ptr<StringPolicy_RulesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::rpc::StringRule >::const_iterator
        it = this->rules().begin();
        it != this->rules().end(); ++it) {
      entry.reset(rules_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.StringPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StringPolicy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StringPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.StringPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.StringPolicy)
    MergeFrom(*source);
  }
}

void StringPolicy::MergeFrom(const StringPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.StringPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rules_.MergeFrom(from.rules_);
}

void StringPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.StringPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringPolicy::CopyFrom(const StringPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.StringPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringPolicy::IsInitialized() const {

  return true;
}

void StringPolicy::Swap(StringPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringPolicy::InternalSwap(StringPolicy* other) {
  rules_.Swap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringPolicy_descriptor_;
  metadata.reflection = StringPolicy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringPolicy

// map<string, .rpc.StringRule> rules = 1;
int StringPolicy::rules_size() const {
  return rules_.size();
}
void StringPolicy::clear_rules() {
  rules_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::rpc::StringRule >&
StringPolicy::rules() const {
  // @@protoc_insertion_point(field_map:rpc.StringPolicy.rules)
  return rules_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::rpc::StringRule >*
StringPolicy::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_map:rpc.StringPolicy.rules)
  return rules_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricsArg::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricsArg::MetricsArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.MetricsArg)
}

void MetricsArg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MetricsArg::MetricsArg(const MetricsArg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.MetricsArg)
}

void MetricsArg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MetricsArg::~MetricsArg() {
  // @@protoc_insertion_point(destructor:rpc.MetricsArg)
  SharedDtor();
}

void MetricsArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetricsArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricsArg_descriptor_;
}

const MetricsArg& MetricsArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

MetricsArg* MetricsArg::default_instance_ = NULL;

MetricsArg* MetricsArg::New(::google::protobuf::Arena* arena) const {
  MetricsArg* n = new MetricsArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricsArg::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.MetricsArg)
  metrics_.Clear();
}

bool MetricsArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.MetricsArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Metric metrics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_metrics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.MetricsArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.MetricsArg)
  return false;
#undef DO_
}

void MetricsArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.MetricsArg)
  // repeated .rpc.Metric metrics = 1;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metrics(i), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.MetricsArg)
}

::google::protobuf::uint8* MetricsArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.MetricsArg)
  // repeated .rpc.Metric metrics = 1;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->metrics(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.MetricsArg)
  return target;
}

int MetricsArg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.MetricsArg)
  int total_size = 0;

  // repeated .rpc.Metric metrics = 1;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.MetricsArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MetricsArg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricsArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.MetricsArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.MetricsArg)
    MergeFrom(*source);
  }
}

void MetricsArg::MergeFrom(const MetricsArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.MetricsArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  metrics_.MergeFrom(from.metrics_);
}

void MetricsArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.MetricsArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsArg::CopyFrom(const MetricsArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.MetricsArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsArg::IsInitialized() const {

  return true;
}

void MetricsArg::Swap(MetricsArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricsArg::InternalSwap(MetricsArg* other) {
  metrics_.UnsafeArenaSwap(&other->metrics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricsArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricsArg_descriptor_;
  metadata.reflection = MetricsArg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricsArg

// repeated .rpc.Metric metrics = 1;
int MetricsArg::metrics_size() const {
  return metrics_.size();
}
void MetricsArg::clear_metrics() {
  metrics_.Clear();
}
const ::rpc::Metric& MetricsArg::metrics(int index) const {
  // @@protoc_insertion_point(field_get:rpc.MetricsArg.metrics)
  return metrics_.Get(index);
}
::rpc::Metric* MetricsArg::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.MetricsArg.metrics)
  return metrics_.Mutable(index);
}
::rpc::Metric* MetricsArg::add_metrics() {
  // @@protoc_insertion_point(field_add:rpc.MetricsArg.metrics)
  return metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
MetricsArg::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:rpc.MetricsArg.metrics)
  return &metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
MetricsArg::metrics() const {
  // @@protoc_insertion_point(field_list:rpc.MetricsArg.metrics)
  return metrics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricsReply::kMetricsFieldNumber;
const int MetricsReply::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricsReply::MetricsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.MetricsReply)
}

void MetricsReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MetricsReply::MetricsReply(const MetricsReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.MetricsReply)
}

void MetricsReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MetricsReply::~MetricsReply() {
  // @@protoc_insertion_point(destructor:rpc.MetricsReply)
  SharedDtor();
}

void MetricsReply::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MetricsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricsReply_descriptor_;
}

const MetricsReply& MetricsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

MetricsReply* MetricsReply::default_instance_ = NULL;

MetricsReply* MetricsReply::New(::google::protobuf::Arena* arena) const {
  MetricsReply* n = new MetricsReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.MetricsReply)
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metrics_.Clear();
}

bool MetricsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.MetricsReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Metric metrics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_metrics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.MetricsReply.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.MetricsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.MetricsReply)
  return false;
#undef DO_
}

void MetricsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.MetricsReply)
  // repeated .rpc.Metric metrics = 1;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metrics(i), output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.MetricsReply.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.MetricsReply)
}

::google::protobuf::uint8* MetricsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.MetricsReply)
  // repeated .rpc.Metric metrics = 1;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->metrics(i), false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.MetricsReply.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.MetricsReply)
  return target;
}

int MetricsReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.MetricsReply)
  int total_size = 0;

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // repeated .rpc.Metric metrics = 1;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.MetricsReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MetricsReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.MetricsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.MetricsReply)
    MergeFrom(*source);
  }
}

void MetricsReply::MergeFrom(const MetricsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.MetricsReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  metrics_.MergeFrom(from.metrics_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void MetricsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.MetricsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsReply::CopyFrom(const MetricsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.MetricsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsReply::IsInitialized() const {

  return true;
}

void MetricsReply::Swap(MetricsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricsReply::InternalSwap(MetricsReply* other) {
  metrics_.UnsafeArenaSwap(&other->metrics_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricsReply_descriptor_;
  metadata.reflection = MetricsReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricsReply

// repeated .rpc.Metric metrics = 1;
int MetricsReply::metrics_size() const {
  return metrics_.size();
}
void MetricsReply::clear_metrics() {
  metrics_.Clear();
}
const ::rpc::Metric& MetricsReply::metrics(int index) const {
  // @@protoc_insertion_point(field_get:rpc.MetricsReply.metrics)
  return metrics_.Get(index);
}
::rpc::Metric* MetricsReply::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.MetricsReply.metrics)
  return metrics_.Mutable(index);
}
::rpc::Metric* MetricsReply::add_metrics() {
  // @@protoc_insertion_point(field_add:rpc.MetricsReply.metrics)
  return metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::rpc::Metric >*
MetricsReply::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:rpc.MetricsReply.metrics)
  return &metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::rpc::Metric >&
MetricsReply::metrics() const {
  // @@protoc_insertion_point(field_list:rpc.MetricsReply.metrics)
  return metrics_;
}

// optional string error = 2;
void MetricsReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MetricsReply::error() const {
  // @@protoc_insertion_point(field_get:rpc.MetricsReply.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MetricsReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.MetricsReply.error)
}
 void MetricsReply::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.MetricsReply.error)
}
 void MetricsReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.MetricsReply.error)
}
 ::std::string* MetricsReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:rpc.MetricsReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MetricsReply::release_error() {
  // @@protoc_insertion_point(field_release:rpc.MetricsReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MetricsReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:rpc.MetricsReply.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMetricTypesArg::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMetricTypesArg::GetMetricTypesArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.GetMetricTypesArg)
}

void GetMetricTypesArg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  config_ = const_cast< ::rpc::ConfigMap*>(&::rpc::ConfigMap::default_instance());
}

GetMetricTypesArg::GetMetricTypesArg(const GetMetricTypesArg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.GetMetricTypesArg)
}

void GetMetricTypesArg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  config_ = NULL;
}

GetMetricTypesArg::~GetMetricTypesArg() {
  // @@protoc_insertion_point(destructor:rpc.GetMetricTypesArg)
  SharedDtor();
}

void GetMetricTypesArg::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void GetMetricTypesArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetricTypesArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetricTypesArg_descriptor_;
}

const GetMetricTypesArg& GetMetricTypesArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plugin_2eproto();
  return *default_instance_;
}

GetMetricTypesArg* GetMetricTypesArg::default_instance_ = NULL;

GetMetricTypesArg* GetMetricTypesArg::New(::google::protobuf::Arena* arena) const {
  GetMetricTypesArg* n = new GetMetricTypesArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMetricTypesArg::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.GetMetricTypesArg)
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}

bool GetMetricTypesArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.GetMetricTypesArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.ConfigMap config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.GetMetricTypesArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.GetMetricTypesArg)
  return false;
#undef DO_
}

void GetMetricTypesArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.GetMetricTypesArg)
  // optional .rpc.ConfigMap config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.GetMetricTypesArg)
}

::google::protobuf::uint8* GetMetricTypesArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.GetMetricTypesArg)
  // optional .rpc.ConfigMap config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.GetMetricTypesArg)
  return target;
}

int GetMetricTypesArg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.GetMetricTypesArg)
  int total_size = 0;

  // optional .rpc.ConfigMap config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetricTypesArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.GetMetricTypesArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetMetricTypesArg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMetricTypesArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.GetMetricTypesArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.GetMetricTypesArg)
    MergeFrom(*source);
  }
}

void GetMetricTypesArg::MergeFrom(const GetMetricTypesArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.GetMetricTypesArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_config()) {
    mutable_config()->::rpc::ConfigMap::MergeFrom(from.config());
  }
}

void GetMetricTypesArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.GetMetricTypesArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetricTypesArg::CopyFrom(const GetMetricTypesArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.GetMetricTypesArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricTypesArg::IsInitialized() const {

  return true;
}

void GetMetricTypesArg::Swap(GetMetricTypesArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMetricTypesArg::InternalSwap(GetMetricTypesArg* other) {
  std::swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMetricTypesArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetricTypesArg_descriptor_;
  metadata.reflection = GetMetricTypesArg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMetricTypesArg

// optional .rpc.ConfigMap config = 1;
bool GetMetricTypesArg::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
void GetMetricTypesArg::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::rpc::ConfigMap& GetMetricTypesArg::config() const {
  // @@protoc_insertion_point(field_get:rpc.GetMetricTypesArg.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::rpc::ConfigMap* GetMetricTypesArg::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::rpc::ConfigMap;
  }
  // @@protoc_insertion_point(field_mutable:rpc.GetMetricTypesArg.config)
  return config_;
}
::rpc::ConfigMap* GetMetricTypesArg::release_config() {
  // @@protoc_insertion_point(field_release:rpc.GetMetricTypesArg.config)
  
  ::rpc::ConfigMap* temp = config_;
  config_ = NULL;
  return temp;
}
void GetMetricTypesArg::set_allocated_config(::rpc::ConfigMap* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.GetMetricTypesArg.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
